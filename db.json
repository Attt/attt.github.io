{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/one-paper/source/css/a11y-dark.min.css","path":"css/a11y-dark.min.css","modified":1,"renderable":1},{"_id":"themes/one-paper/source/css/fonts.css","path":"css/fonts.css","modified":1,"renderable":1},{"_id":"themes/one-paper/source/css/markdown.css","path":"css/markdown.css","modified":1,"renderable":1},{"_id":"themes/one-paper/source/css/reset.css","path":"css/reset.css","modified":1,"renderable":1},{"_id":"themes/one-paper/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/one-paper/source/fonts/montserrat-v23-latin-600italic.woff","path":"fonts/montserrat-v23-latin-600italic.woff","modified":1,"renderable":1},{"_id":"themes/one-paper/source/fonts/montserrat-v23-latin-600.woff2","path":"fonts/montserrat-v23-latin-600.woff2","modified":1,"renderable":1},{"_id":"themes/one-paper/source/fonts/montserrat-v23-latin-600italic.woff2","path":"fonts/montserrat-v23-latin-600italic.woff2","modified":1,"renderable":1},{"_id":"themes/one-paper/source/fonts/montserrat-v23-latin-italic.woff2","path":"fonts/montserrat-v23-latin-italic.woff2","modified":1,"renderable":1},{"_id":"themes/one-paper/source/fonts/montserrat-v23-latin-italic.woff","path":"fonts/montserrat-v23-latin-italic.woff","modified":1,"renderable":1},{"_id":"themes/one-paper/source/fonts/montserrat-v23-latin-regular.woff","path":"fonts/montserrat-v23-latin-regular.woff","modified":1,"renderable":1},{"_id":"themes/one-paper/source/fonts/montserrat-v23-latin-regular.woff2","path":"fonts/montserrat-v23-latin-regular.woff2","modified":1,"renderable":1},{"_id":"themes/one-paper/source/fonts/montserrat-v23-latin-600.woff","path":"fonts/montserrat-v23-latin-600.woff","modified":1,"renderable":1},{"_id":"themes/one-paper/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/one-paper/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/one-paper/source/img/one-paper.png","path":"img/one-paper.png","modified":1,"renderable":1},{"_id":"themes/one-paper/source/js/highlight.min.js","path":"js/highlight.min.js","modified":1,"renderable":1},{"_id":"themes/one-paper/source/js/highlightjs-line-numbers.js","path":"js/highlightjs-line-numbers.js","modified":1,"renderable":1},{"_id":"source/images/0.jpg","path":"images/0.jpg","modified":1,"renderable":0},{"_id":"source/images/me.png","path":"images/me.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/jvm-metaspace-leakage-caused-by-loading-dynamic-class.md","hash":"8209a0ea8c7b78cc2b9e591a17fd59114ac2db2c","modified":1647510076717},{"_id":"source/_posts/fgo-frida-il2cpp-bridge.md","hash":"959b5cd644bae00c29cdb80128dea039bb0188da","modified":1647502517159},{"_id":"source/_posts/.DS_Store","hash":"7b5e19896c8273f8b931307e79061af3e38071a9","modified":1647507802908},{"_id":"source/about/index.md","hash":"725ccab5609af677a21f9c63e5291b1bc3c60a32","modified":1647502685803},{"_id":"source/.DS_Store","hash":"c7b6307e83e82c0e88cfd9f02a3cdaf3641d9206","modified":1647503990753},{"_id":"source/_posts/jvm-metaspace-leakage-caused-by-loading-dynamic-class/.DS_Store","hash":"b8e5951c497e1060bfccf7be197be3bad8cb1885","modified":1647507810817},{"_id":"source/_posts/jvm-metaspace-leakage-caused-by-loading-dynamic-class/0.png","hash":"622a8e751c216e4020cb319f9e0ca67f462d5208","modified":1647504044576},{"_id":"source/images/me.png","hash":"0a5449222d1957e9b69dabca1db65b51c53798ea","modified":1647501760995},{"_id":"themes/one-paper/LICENSE","hash":"aad1dcb7deccd18a89508fa2ad78101dafa10cc9","modified":1646967049000},{"_id":"themes/one-paper/README.md","hash":"39b4a0d2b37a27f5d247339b8e851ed4d89e0851","modified":1646967049000},{"_id":"themes/one-paper/layout/index.ejs","hash":"c9f87f50f9e97761aa2334fe47e427b97d811836","modified":1646967049000},{"_id":"themes/one-paper/_config.yml","hash":"13a88d6e9d9ad7c8363b852cfc681e458c119116","modified":1646967049000},{"_id":"themes/one-paper/layout/archive.ejs","hash":"ff0d592a498756894f9ca969f1f2f57135c58adc","modified":1646967049000},{"_id":"themes/one-paper/layout/layout.ejs","hash":"68d1bb31fccbe9810b9c8a6cd54b53938e0318a2","modified":1646967049000},{"_id":"themes/one-paper/layout/_partial/header.ejs","hash":"2b54259f35942eeb1b99482c2a4517152fc87f0c","modified":1646967049000},{"_id":"themes/one-paper/layout/_partial/head.ejs","hash":"5e089c0f24607334d34215948f9bfba2569c5eea","modified":1646967049000},{"_id":"themes/one-paper/layout/_partial/footer.ejs","hash":"98579317b09976538ff7bbbe7a13e71b1fcf2625","modified":1646967049000},{"_id":"themes/one-paper/layout/_partial/paginator.ejs","hash":"980bf0a0be798c19df4b0827aa4b90b35c872425","modified":1646967049000},{"_id":"themes/one-paper/layout/_partial/post-header.ejs","hash":"f6fa471122459b25a9948405d72cb5f197d2fc25","modified":1646967049000},{"_id":"themes/one-paper/source/css/a11y-dark.min.css","hash":"e0a3294faa7dfa1eae300caea5a01f438b643b93","modified":1646967049000},{"_id":"themes/one-paper/layout/post.ejs","hash":"5a70cb257c3112327750b4d988d36539a43d5ca8","modified":1646967049000},{"_id":"themes/one-paper/source/css/fonts.css","hash":"bd6171c8de8d9f4efafca3802c4d20099d7fca1c","modified":1646967049000},{"_id":"themes/one-paper/source/css/markdown.css","hash":"8116b5049847ca524b99e10a501b945dcff0f29d","modified":1646967049000},{"_id":"themes/one-paper/source/css/reset.css","hash":"f6184d3f74dc704f077ca4e0b91003652a9db978","modified":1646967049000},{"_id":"themes/one-paper/source/fonts/montserrat-v23-latin-600italic.woff","hash":"c0e80c18fac1cd10469c4f922ad92e81fc8b3b94","modified":1646967049000},{"_id":"themes/one-paper/source/fonts/montserrat-v23-latin-600.woff2","hash":"2fe30978041c41a2994ac0fd491e83d32a3203b7","modified":1646967049000},{"_id":"themes/one-paper/source/css/style.css","hash":"03f51de4e8dfdeb6f37eaf660d1d298acde51247","modified":1646967049000},{"_id":"themes/one-paper/source/fonts/montserrat-v23-latin-600.woff","hash":"925d9f095488dc77dd84e8414422f0113f4628a9","modified":1646967049000},{"_id":"themes/one-paper/source/fonts/montserrat-v23-latin-600italic.woff2","hash":"1f24e9edcccd42d4694a4020d6a8f9b9cb28f471","modified":1646967049000},{"_id":"themes/one-paper/source/fonts/montserrat-v23-latin-italic.woff2","hash":"ce1eae3f714702a82c1e9c05b5ba302a9e91ac20","modified":1646967049000},{"_id":"themes/one-paper/source/fonts/montserrat-v23-latin-regular.woff2","hash":"f7eefafb7bfdc6b5572714fa267268b845a67cf4","modified":1646967049000},{"_id":"themes/one-paper/source/fonts/montserrat-v23-latin-regular.woff","hash":"285adda1da1fc15583ad53160d66032aeccb45ea","modified":1646967049000},{"_id":"themes/one-paper/source/img/favicon.png","hash":"ebe06d671cb14bdb8eb4cb785d5a21e20b1b3902","modified":1647502006824},{"_id":"themes/one-paper/source/img/favicon.ico","hash":"ebe06d671cb14bdb8eb4cb785d5a21e20b1b3902","modified":1647501959064},{"_id":"themes/one-paper/source/fonts/montserrat-v23-latin-italic.woff","hash":"fca5ee87a17c57eb53265da1c2c75db7305ad69c","modified":1646967049000},{"_id":"themes/one-paper/source/js/highlightjs-line-numbers.js","hash":"690e96133591495fa847d828573bd0576b2d168a","modified":1646967049000},{"_id":"source/_posts/jvm-metaspace-leakage-caused-by-loading-dynamic-class/5.png","hash":"32d8635ee433032162bc323cc0c7a9e1388649dc","modified":1647504110746},{"_id":"themes/one-paper/source/js/highlight.min.js","hash":"d264ad16bdf39cfec2b06c20223b87fcb37ad27b","modified":1646967049000},{"_id":"source/images/0.jpg","hash":"974145668d7657911d0fee01f816868293fe2e4f","modified":1647501379949},{"_id":"themes/one-paper/source/img/one-paper.png","hash":"eadd349e5316a154099cb06e41abe5a105940e37","modified":1646967049000},{"_id":"source/_posts/jvm-metaspace-leakage-caused-by-loading-dynamic-class/3.png","hash":"68a5a7ff36fe2e3e8288a954ff9df6ba038234a1","modified":1647504098425},{"_id":"source/_posts/jvm-metaspace-leakage-caused-by-loading-dynamic-class/2.png","hash":"5e49a6750f7235e6581109f549aba4720b0b4e1e","modified":1647504106945},{"_id":"source/_posts/jvm-metaspace-leakage-caused-by-loading-dynamic-class/4.png","hash":"3734fddc126b1b739525b7298ca463a8e167c2c3","modified":1647504120146},{"_id":"source/_posts/jvm-metaspace-leakage-caused-by-loading-dynamic-class/1.png","hash":"070e8c7d6bb1139c83822c0148cac0135ec4c448","modified":1647504065923},{"_id":"public/about/index.html","hash":"2a9b4266a72480eb83e134c8cd9de4c1e1fa9a9b","modified":1647510096716},{"_id":"public/2022/03/17/jvm-metaspace-leakage-caused-by-loading-dynamic-class/index.html","hash":"d9257c8e386e483ce82d9c19342426c769f63a75","modified":1647510096716},{"_id":"public/2022/03/17/fgo-frida-il2cpp-bridge/index.html","hash":"c382a15e2e886683ece143b727ce62cb1abbb707","modified":1647510096716},{"_id":"public/archives/index.html","hash":"7bf7e9b86cf528599c243e968e34fd21c0633ad6","modified":1647510096716},{"_id":"public/archives/2022/index.html","hash":"7bf7e9b86cf528599c243e968e34fd21c0633ad6","modified":1647510096716},{"_id":"public/archives/2022/03/index.html","hash":"7bf7e9b86cf528599c243e968e34fd21c0633ad6","modified":1647510096716},{"_id":"public/index.html","hash":"4a44a7882b3b9c05a8cab12854c4b28a0796b0c6","modified":1647510096716},{"_id":"public/fonts/montserrat-v23-latin-600italic.woff","hash":"c0e80c18fac1cd10469c4f922ad92e81fc8b3b94","modified":1647510096716},{"_id":"public/fonts/montserrat-v23-latin-600.woff2","hash":"2fe30978041c41a2994ac0fd491e83d32a3203b7","modified":1647510096716},{"_id":"public/fonts/montserrat-v23-latin-italic.woff2","hash":"ce1eae3f714702a82c1e9c05b5ba302a9e91ac20","modified":1647510096716},{"_id":"public/fonts/montserrat-v23-latin-regular.woff","hash":"285adda1da1fc15583ad53160d66032aeccb45ea","modified":1647510096716},{"_id":"public/fonts/montserrat-v23-latin-italic.woff","hash":"fca5ee87a17c57eb53265da1c2c75db7305ad69c","modified":1647510096716},{"_id":"public/fonts/montserrat-v23-latin-regular.woff2","hash":"f7eefafb7bfdc6b5572714fa267268b845a67cf4","modified":1647510096716},{"_id":"public/fonts/montserrat-v23-latin-600.woff","hash":"925d9f095488dc77dd84e8414422f0113f4628a9","modified":1647510096716},{"_id":"public/img/favicon.ico","hash":"ebe06d671cb14bdb8eb4cb785d5a21e20b1b3902","modified":1647510096716},{"_id":"public/fonts/montserrat-v23-latin-600italic.woff2","hash":"1f24e9edcccd42d4694a4020d6a8f9b9cb28f471","modified":1647510096716},{"_id":"public/img/favicon.png","hash":"ebe06d671cb14bdb8eb4cb785d5a21e20b1b3902","modified":1647510096716},{"_id":"public/images/me.png","hash":"0a5449222d1957e9b69dabca1db65b51c53798ea","modified":1647510096716},{"_id":"public/2022/03/17/jvm-metaspace-leakage-caused-by-loading-dynamic-class/0.png","hash":"622a8e751c216e4020cb319f9e0ca67f462d5208","modified":1647510096716},{"_id":"public/css/fonts.css","hash":"bd6171c8de8d9f4efafca3802c4d20099d7fca1c","modified":1647510096716},{"_id":"public/css/a11y-dark.min.css","hash":"e0a3294faa7dfa1eae300caea5a01f438b643b93","modified":1647510096716},{"_id":"public/css/style.css","hash":"03f51de4e8dfdeb6f37eaf660d1d298acde51247","modified":1647510096716},{"_id":"public/css/markdown.css","hash":"8116b5049847ca524b99e10a501b945dcff0f29d","modified":1647510096716},{"_id":"public/js/highlightjs-line-numbers.js","hash":"690e96133591495fa847d828573bd0576b2d168a","modified":1647510096716},{"_id":"public/css/reset.css","hash":"f6184d3f74dc704f077ca4e0b91003652a9db978","modified":1647510096716},{"_id":"public/js/highlight.min.js","hash":"d264ad16bdf39cfec2b06c20223b87fcb37ad27b","modified":1647510096716},{"_id":"public/2022/03/17/jvm-metaspace-leakage-caused-by-loading-dynamic-class/5.png","hash":"32d8635ee433032162bc323cc0c7a9e1388649dc","modified":1647510096716},{"_id":"public/images/0.jpg","hash":"974145668d7657911d0fee01f816868293fe2e4f","modified":1647510096716},{"_id":"public/img/one-paper.png","hash":"eadd349e5316a154099cb06e41abe5a105940e37","modified":1647510096716},{"_id":"public/2022/03/17/jvm-metaspace-leakage-caused-by-loading-dynamic-class/3.png","hash":"68a5a7ff36fe2e3e8288a954ff9df6ba038234a1","modified":1647510096716},{"_id":"public/2022/03/17/jvm-metaspace-leakage-caused-by-loading-dynamic-class/2.png","hash":"5e49a6750f7235e6581109f549aba4720b0b4e1e","modified":1647510096716},{"_id":"public/2022/03/17/jvm-metaspace-leakage-caused-by-loading-dynamic-class/4.png","hash":"3734fddc126b1b739525b7298ca463a8e167c2c3","modified":1647510096716},{"_id":"public/2022/03/17/jvm-metaspace-leakage-caused-by-loading-dynamic-class/1.png","hash":"070e8c7d6bb1139c83822c0148cac0135ec4c448","modified":1647510096716}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2022-03-17T07:10:42.000Z","_content":"\n# About\n\n![me](/images/me.png)\n\n\n\n`「撃っていいのは、撃たれる覚悟のある奴だけだ。」`\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-03-17 15:10:42\n---\n\n# About\n\n![me](/images/me.png)\n\n\n\n`「撃っていいのは、撃たれる覚悟のある奴だけだ。」`\n","updated":"2022-03-17T07:38:05.803Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl0usz2m40000fmt1hughcugp","content":"<h1 id=\"About\"><a href=\"#About\" class=\"headerlink\" title=\"About\"></a>About</h1><p><img src=\"/images/me.png\" alt=\"me\"></p>\n<p><code>「撃っていいのは、撃たれる覚悟のある奴だけだ。」</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"About\"><a href=\"#About\" class=\"headerlink\" title=\"About\"></a>About</h1><p><img src=\"/images/me.png\" alt=\"me\"></p>\n<p><code>「撃っていいのは、撃たれる覚悟のある奴だけだ。」</code></p>\n"}],"Post":[{"title":"frida-il2cpp-bridge script for fate/go","date":"2022-03-17T07:10:42.000Z","_content":"\nhack script for fgo based on [frida](https://github.com/frida/frida) and [frida-il2cpp-bridge](https://github.com/vfsfitvnm/frida-il2cpp-bridge) \n\n### Supports\n\n- bilibili fate go v2.36.0\n\n- aniplex fate go v2.49.0\n  \n  *fate go in other channels/platforms/versions may functional but it's not tested*\n\n### Steps\n\n#### For Android\n\n**Android 10 or 11 is recommended, among testing in android 9 sometimes game may crash*\n\n- Install nodeJs for NPM\n\n- Install frida and frida-tools with ` npm install frida && npm install frida-tools`\n\n- Download latest frida-server from https://github.com/frida/frida/releases\n\n- Start rooted device, rettach with ` adb root`\n\n- Install game apk\n\n- Copy ***frida-server*** file to device directory such as ***/data/local/tmp***\n\n- Run `adb shell` to connect to device\n\n- Change ***frida-server*** file permission with `chmod 777 {directory}/frida-server`\n\n- Navigate to directory and run server with `./frida-server`\n\n#### For IOS\n\n- TODO\n\n#### Run script\n\n- See comments in ***fgo_hack_script.ts***, and change codes according to the *fgo* version\n  \n  - there is some tiny diffrences between *bili fatego* and *aniplex fatego*\n\n- Build with `./build_aniplex.sh` or `./build_bili.sh`\n\n- Run with `./run.sh com.bilibili.fgo` or `./run.sh com.aniplex.fategrandorder`\n  \n  - you could now see some logs (if codes like `console.log(...)` is uncommented) when starting battle\n\n- Have fun.\n\n### Features\n\n![in battle](/images/0.jpg)\n\n#### active\n\n1. Increase player's servant hp (by 500,000)\n\n2. Set all skills lv to 10 (both servant's and master's)\n\n3. Change all skills charge turn down (to 1)\n\n4. Try to disable codestage anti-cheat engine (notice that there is **NO WAY** to cheat safely cause anyway the battle data will be sent to game server)\n\n#### inactive\n\n1. Never die (reset hp every time servant dies)\n\n2. Increase attack & defence np rate\n\n3. Increase attack star rate\n\n### Issues\n\n- Could not ran with X64-based simulator such as MuMu (tested) at this time ([frida-il2cpp-bridge](https://github.com/vfsfitvnm/frida-il2cpp-bridge) version 0.7.9)\n\n- Features in [inactive](#inactive) may invoked too frequently that may cause some leakage\n","source":"_posts/fgo-frida-il2cpp-bridge.md","raw":"---\ntitle: frida-il2cpp-bridge script for fate/go\ndate: 2022-03-17 15:10:42\n---\n\nhack script for fgo based on [frida](https://github.com/frida/frida) and [frida-il2cpp-bridge](https://github.com/vfsfitvnm/frida-il2cpp-bridge) \n\n### Supports\n\n- bilibili fate go v2.36.0\n\n- aniplex fate go v2.49.0\n  \n  *fate go in other channels/platforms/versions may functional but it's not tested*\n\n### Steps\n\n#### For Android\n\n**Android 10 or 11 is recommended, among testing in android 9 sometimes game may crash*\n\n- Install nodeJs for NPM\n\n- Install frida and frida-tools with ` npm install frida && npm install frida-tools`\n\n- Download latest frida-server from https://github.com/frida/frida/releases\n\n- Start rooted device, rettach with ` adb root`\n\n- Install game apk\n\n- Copy ***frida-server*** file to device directory such as ***/data/local/tmp***\n\n- Run `adb shell` to connect to device\n\n- Change ***frida-server*** file permission with `chmod 777 {directory}/frida-server`\n\n- Navigate to directory and run server with `./frida-server`\n\n#### For IOS\n\n- TODO\n\n#### Run script\n\n- See comments in ***fgo_hack_script.ts***, and change codes according to the *fgo* version\n  \n  - there is some tiny diffrences between *bili fatego* and *aniplex fatego*\n\n- Build with `./build_aniplex.sh` or `./build_bili.sh`\n\n- Run with `./run.sh com.bilibili.fgo` or `./run.sh com.aniplex.fategrandorder`\n  \n  - you could now see some logs (if codes like `console.log(...)` is uncommented) when starting battle\n\n- Have fun.\n\n### Features\n\n![in battle](/images/0.jpg)\n\n#### active\n\n1. Increase player's servant hp (by 500,000)\n\n2. Set all skills lv to 10 (both servant's and master's)\n\n3. Change all skills charge turn down (to 1)\n\n4. Try to disable codestage anti-cheat engine (notice that there is **NO WAY** to cheat safely cause anyway the battle data will be sent to game server)\n\n#### inactive\n\n1. Never die (reset hp every time servant dies)\n\n2. Increase attack & defence np rate\n\n3. Increase attack star rate\n\n### Issues\n\n- Could not ran with X64-based simulator such as MuMu (tested) at this time ([frida-il2cpp-bridge](https://github.com/vfsfitvnm/frida-il2cpp-bridge) version 0.7.9)\n\n- Features in [inactive](#inactive) may invoked too frequently that may cause some leakage\n","slug":"fgo-frida-il2cpp-bridge","published":1,"updated":"2022-03-17T07:35:17.159Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0usz2m60001fmt107du6cii","content":"<p>hack script for fgo based on <a href=\"https://github.com/frida/frida\">frida</a> and <a href=\"https://github.com/vfsfitvnm/frida-il2cpp-bridge\">frida-il2cpp-bridge</a> </p>\n<h3 id=\"Supports\"><a href=\"#Supports\" class=\"headerlink\" title=\"Supports\"></a>Supports</h3><ul>\n<li><p>bilibili fate go v2.36.0</p>\n</li>\n<li><p>aniplex fate go v2.49.0</p>\n<p><em>fate go in other channels&#x2F;platforms&#x2F;versions may functional but it’s not tested</em></p>\n</li>\n</ul>\n<h3 id=\"Steps\"><a href=\"#Steps\" class=\"headerlink\" title=\"Steps\"></a>Steps</h3><h4 id=\"For-Android\"><a href=\"#For-Android\" class=\"headerlink\" title=\"For Android\"></a>For Android</h4><p>*<em>Android 10 or 11 is recommended, among testing in android 9 sometimes game may crash</em></p>\n<ul>\n<li><p>Install nodeJs for NPM</p>\n</li>\n<li><p>Install frida and frida-tools with <code> npm install frida &amp;&amp; npm install frida-tools</code></p>\n</li>\n<li><p>Download latest frida-server from <a href=\"https://github.com/frida/frida/releases\">https://github.com/frida/frida/releases</a></p>\n</li>\n<li><p>Start rooted device, rettach with <code> adb root</code></p>\n</li>\n<li><p>Install game apk</p>\n</li>\n<li><p>Copy <em><strong>frida-server</strong></em> file to device directory such as <em><strong>&#x2F;data&#x2F;local&#x2F;tmp</strong></em></p>\n</li>\n<li><p>Run <code>adb shell</code> to connect to device</p>\n</li>\n<li><p>Change <em><strong>frida-server</strong></em> file permission with <code>chmod 777 &#123;directory&#125;/frida-server</code></p>\n</li>\n<li><p>Navigate to directory and run server with <code>./frida-server</code></p>\n</li>\n</ul>\n<h4 id=\"For-IOS\"><a href=\"#For-IOS\" class=\"headerlink\" title=\"For IOS\"></a>For IOS</h4><ul>\n<li>TODO</li>\n</ul>\n<h4 id=\"Run-script\"><a href=\"#Run-script\" class=\"headerlink\" title=\"Run script\"></a>Run script</h4><ul>\n<li><p>See comments in <em><strong>fgo_hack_script.ts</strong></em>, and change codes according to the <em>fgo</em> version</p>\n<ul>\n<li>there is some tiny diffrences between <em>bili fatego</em> and <em>aniplex fatego</em></li>\n</ul>\n</li>\n<li><p>Build with <code>./build_aniplex.sh</code> or <code>./build_bili.sh</code></p>\n</li>\n<li><p>Run with <code>./run.sh com.bilibili.fgo</code> or <code>./run.sh com.aniplex.fategrandorder</code></p>\n<ul>\n<li>you could now see some logs (if codes like <code>console.log(...)</code> is uncommented) when starting battle</li>\n</ul>\n</li>\n<li><p>Have fun.</p>\n</li>\n</ul>\n<h3 id=\"Features\"><a href=\"#Features\" class=\"headerlink\" title=\"Features\"></a>Features</h3><p><img src=\"/images/0.jpg\" alt=\"in battle\"></p>\n<h4 id=\"active\"><a href=\"#active\" class=\"headerlink\" title=\"active\"></a>active</h4><ol>\n<li><p>Increase player’s servant hp (by 500,000)</p>\n</li>\n<li><p>Set all skills lv to 10 (both servant’s and master’s)</p>\n</li>\n<li><p>Change all skills charge turn down (to 1)</p>\n</li>\n<li><p>Try to disable codestage anti-cheat engine (notice that there is <strong>NO WAY</strong> to cheat safely cause anyway the battle data will be sent to game server)</p>\n</li>\n</ol>\n<h4 id=\"inactive\"><a href=\"#inactive\" class=\"headerlink\" title=\"inactive\"></a>inactive</h4><ol>\n<li><p>Never die (reset hp every time servant dies)</p>\n</li>\n<li><p>Increase attack &amp; defence np rate</p>\n</li>\n<li><p>Increase attack star rate</p>\n</li>\n</ol>\n<h3 id=\"Issues\"><a href=\"#Issues\" class=\"headerlink\" title=\"Issues\"></a>Issues</h3><ul>\n<li><p>Could not ran with X64-based simulator such as MuMu (tested) at this time (<a href=\"https://github.com/vfsfitvnm/frida-il2cpp-bridge\">frida-il2cpp-bridge</a> version 0.7.9)</p>\n</li>\n<li><p>Features in <a href=\"#inactive\">inactive</a> may invoked too frequently that may cause some leakage</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>hack script for fgo based on <a href=\"https://github.com/frida/frida\">frida</a> and <a href=\"https://github.com/vfsfitvnm/frida-il2cpp-bridge\">frida-il2cpp-bridge</a> </p>\n<h3 id=\"Supports\"><a href=\"#Supports\" class=\"headerlink\" title=\"Supports\"></a>Supports</h3><ul>\n<li><p>bilibili fate go v2.36.0</p>\n</li>\n<li><p>aniplex fate go v2.49.0</p>\n<p><em>fate go in other channels&#x2F;platforms&#x2F;versions may functional but it’s not tested</em></p>\n</li>\n</ul>\n<h3 id=\"Steps\"><a href=\"#Steps\" class=\"headerlink\" title=\"Steps\"></a>Steps</h3><h4 id=\"For-Android\"><a href=\"#For-Android\" class=\"headerlink\" title=\"For Android\"></a>For Android</h4><p>*<em>Android 10 or 11 is recommended, among testing in android 9 sometimes game may crash</em></p>\n<ul>\n<li><p>Install nodeJs for NPM</p>\n</li>\n<li><p>Install frida and frida-tools with <code> npm install frida &amp;&amp; npm install frida-tools</code></p>\n</li>\n<li><p>Download latest frida-server from <a href=\"https://github.com/frida/frida/releases\">https://github.com/frida/frida/releases</a></p>\n</li>\n<li><p>Start rooted device, rettach with <code> adb root</code></p>\n</li>\n<li><p>Install game apk</p>\n</li>\n<li><p>Copy <em><strong>frida-server</strong></em> file to device directory such as <em><strong>&#x2F;data&#x2F;local&#x2F;tmp</strong></em></p>\n</li>\n<li><p>Run <code>adb shell</code> to connect to device</p>\n</li>\n<li><p>Change <em><strong>frida-server</strong></em> file permission with <code>chmod 777 &#123;directory&#125;/frida-server</code></p>\n</li>\n<li><p>Navigate to directory and run server with <code>./frida-server</code></p>\n</li>\n</ul>\n<h4 id=\"For-IOS\"><a href=\"#For-IOS\" class=\"headerlink\" title=\"For IOS\"></a>For IOS</h4><ul>\n<li>TODO</li>\n</ul>\n<h4 id=\"Run-script\"><a href=\"#Run-script\" class=\"headerlink\" title=\"Run script\"></a>Run script</h4><ul>\n<li><p>See comments in <em><strong>fgo_hack_script.ts</strong></em>, and change codes according to the <em>fgo</em> version</p>\n<ul>\n<li>there is some tiny diffrences between <em>bili fatego</em> and <em>aniplex fatego</em></li>\n</ul>\n</li>\n<li><p>Build with <code>./build_aniplex.sh</code> or <code>./build_bili.sh</code></p>\n</li>\n<li><p>Run with <code>./run.sh com.bilibili.fgo</code> or <code>./run.sh com.aniplex.fategrandorder</code></p>\n<ul>\n<li>you could now see some logs (if codes like <code>console.log(...)</code> is uncommented) when starting battle</li>\n</ul>\n</li>\n<li><p>Have fun.</p>\n</li>\n</ul>\n<h3 id=\"Features\"><a href=\"#Features\" class=\"headerlink\" title=\"Features\"></a>Features</h3><p><img src=\"/images/0.jpg\" alt=\"in battle\"></p>\n<h4 id=\"active\"><a href=\"#active\" class=\"headerlink\" title=\"active\"></a>active</h4><ol>\n<li><p>Increase player’s servant hp (by 500,000)</p>\n</li>\n<li><p>Set all skills lv to 10 (both servant’s and master’s)</p>\n</li>\n<li><p>Change all skills charge turn down (to 1)</p>\n</li>\n<li><p>Try to disable codestage anti-cheat engine (notice that there is <strong>NO WAY</strong> to cheat safely cause anyway the battle data will be sent to game server)</p>\n</li>\n</ol>\n<h4 id=\"inactive\"><a href=\"#inactive\" class=\"headerlink\" title=\"inactive\"></a>inactive</h4><ol>\n<li><p>Never die (reset hp every time servant dies)</p>\n</li>\n<li><p>Increase attack &amp; defence np rate</p>\n</li>\n<li><p>Increase attack star rate</p>\n</li>\n</ol>\n<h3 id=\"Issues\"><a href=\"#Issues\" class=\"headerlink\" title=\"Issues\"></a>Issues</h3><ul>\n<li><p>Could not ran with X64-based simulator such as MuMu (tested) at this time (<a href=\"https://github.com/vfsfitvnm/frida-il2cpp-bridge\">frida-il2cpp-bridge</a> version 0.7.9)</p>\n</li>\n<li><p>Features in <a href=\"#inactive\">inactive</a> may invoked too frequently that may cause some leakage</p>\n</li>\n</ul>\n"},{"title":"<JVM> Metaspace leakage caused by loading dynamic class","date":"2022-03-17T07:59:28.000Z","_content":"\n## cause\n\nDefine several classes with certain `name` by using `ClassLoader#defineClass` , no matter the `name` is specified or not, the HotSpot JVM always throws OOM in metaspace at last.\n\n## behavior of `ClassLoader#defineClass`\n\n![defineClass](jvm-metaspace-leakage-caused-by-loading-dynamic-class/0.png)\n\n`ClassLoader#defineClass` is JVM native method, the major steps are:\n\n1. parse class file and check if class file format is correct\n   \n   ![vm specification](jvm-metaspace-leakage-caused-by-loading-dynamic-class/1.png)\n\n2. check `systemDictionary` with parameter `name` to determine if Klass/KlassHandler is already loaded\n\n(pretend here are some source codes XD)\n\nBut if step-2 exists, why the metaspace memory exhausts at last?\n\n## what actually happens when VM parsing class file\n\nIn step-1 mentioned above, HotSpot VM not only parses the class file but save the class data structure (class code, vtable, itable, etc.) to metaspace. so even if the class name is totally the same, there is duplicated class data generated in metaspace, and which is the metaspace OOM cause.\n\n![native define class](jvm-metaspace-leakage-caused-by-loading-dynamic-class/2.png)\n\n![find klass in dict](jvm-metaspace-leakage-caused-by-loading-dynamic-class/3.png)\n\n![check if class already defined](jvm-metaspace-leakage-caused-by-loading-dynamic-class/4.png)\n\nWhy not just only parse the file without saving it to metaspace?\n\nIn my gusse:\n\n- In java code, most of class definition is done by `ClassLoader#loadClass()` which checks the class name before vm method invoked.\n  \n  ![loadClass in java](jvm-metaspace-leakage-caused-by-loading-dynamic-class/5.png)\n\n- There is not so many chances that class file format is bad (ClassFormatError), so it will be a large waste that parse class file and then dellocate the memory and then parse it again if system dictionary dosn't contain the same class handler.\n\n## Class data GC in metaspace\n\nActually there is no specific GC behavior in metaspace, in VM the GC always works in heap, but the pointer pointed to class data in metaspace is saved in class instance which lives in heap. So if the class instance is time to be collected, the class data in metaspace will be freed to.\n","source":"_posts/jvm-metaspace-leakage-caused-by-loading-dynamic-class.md","raw":"---\ntitle: <JVM> Metaspace leakage caused by loading dynamic class\ndate: 2022-03-17 15:59:28\ntags:\n---\n\n## cause\n\nDefine several classes with certain `name` by using `ClassLoader#defineClass` , no matter the `name` is specified or not, the HotSpot JVM always throws OOM in metaspace at last.\n\n## behavior of `ClassLoader#defineClass`\n\n![defineClass](jvm-metaspace-leakage-caused-by-loading-dynamic-class/0.png)\n\n`ClassLoader#defineClass` is JVM native method, the major steps are:\n\n1. parse class file and check if class file format is correct\n   \n   ![vm specification](jvm-metaspace-leakage-caused-by-loading-dynamic-class/1.png)\n\n2. check `systemDictionary` with parameter `name` to determine if Klass/KlassHandler is already loaded\n\n(pretend here are some source codes XD)\n\nBut if step-2 exists, why the metaspace memory exhausts at last?\n\n## what actually happens when VM parsing class file\n\nIn step-1 mentioned above, HotSpot VM not only parses the class file but save the class data structure (class code, vtable, itable, etc.) to metaspace. so even if the class name is totally the same, there is duplicated class data generated in metaspace, and which is the metaspace OOM cause.\n\n![native define class](jvm-metaspace-leakage-caused-by-loading-dynamic-class/2.png)\n\n![find klass in dict](jvm-metaspace-leakage-caused-by-loading-dynamic-class/3.png)\n\n![check if class already defined](jvm-metaspace-leakage-caused-by-loading-dynamic-class/4.png)\n\nWhy not just only parse the file without saving it to metaspace?\n\nIn my gusse:\n\n- In java code, most of class definition is done by `ClassLoader#loadClass()` which checks the class name before vm method invoked.\n  \n  ![loadClass in java](jvm-metaspace-leakage-caused-by-loading-dynamic-class/5.png)\n\n- There is not so many chances that class file format is bad (ClassFormatError), so it will be a large waste that parse class file and then dellocate the memory and then parse it again if system dictionary dosn't contain the same class handler.\n\n## Class data GC in metaspace\n\nActually there is no specific GC behavior in metaspace, in VM the GC always works in heap, but the pointer pointed to class data in metaspace is saved in class instance which lives in heap. So if the class instance is time to be collected, the class data in metaspace will be freed to.\n","slug":"jvm-metaspace-leakage-caused-by-loading-dynamic-class","published":1,"updated":"2022-03-17T09:41:16.717Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0usz2ma0002fmt1e4sv5dj0","content":"<h2 id=\"cause\"><a href=\"#cause\" class=\"headerlink\" title=\"cause\"></a>cause</h2><p>Define several classes with certain <code>name</code> by using <code>ClassLoader#defineClass</code> , no matter the <code>name</code> is specified or not, the HotSpot JVM always throws OOM in metaspace at last.</p>\n<h2 id=\"behavior-of-ClassLoader-defineClass\"><a href=\"#behavior-of-ClassLoader-defineClass\" class=\"headerlink\" title=\"behavior of ClassLoader#defineClass\"></a>behavior of <code>ClassLoader#defineClass</code></h2><p><img src=\"/2022/03/17/jvm-metaspace-leakage-caused-by-loading-dynamic-class/0.png\" alt=\"defineClass\"></p>\n<p><code>ClassLoader#defineClass</code> is JVM native method, the major steps are:</p>\n<ol>\n<li><p>parse class file and check if class file format is correct</p>\n<p><img src=\"/2022/03/17/jvm-metaspace-leakage-caused-by-loading-dynamic-class/1.png\" alt=\"vm specification\"></p>\n</li>\n<li><p>check <code>systemDictionary</code> with parameter <code>name</code> to determine if Klass&#x2F;KlassHandler is already loaded</p>\n</li>\n</ol>\n<p>(pretend here are some source codes XD)</p>\n<p>But if step-2 exists, why the metaspace memory exhausts at last?</p>\n<h2 id=\"what-actually-happens-when-VM-parsing-class-file\"><a href=\"#what-actually-happens-when-VM-parsing-class-file\" class=\"headerlink\" title=\"what actually happens when VM parsing class file\"></a>what actually happens when VM parsing class file</h2><p>In step-1 mentioned above, HotSpot VM not only parses the class file but save the class data structure (class code, vtable, itable, etc.) to metaspace. so even if the class name is totally the same, there is duplicated class data generated in metaspace, and which is the metaspace OOM cause.</p>\n<p><img src=\"/2022/03/17/jvm-metaspace-leakage-caused-by-loading-dynamic-class/2.png\" alt=\"native define class\"></p>\n<p><img src=\"/2022/03/17/jvm-metaspace-leakage-caused-by-loading-dynamic-class/3.png\" alt=\"find klass in dict\"></p>\n<p><img src=\"/2022/03/17/jvm-metaspace-leakage-caused-by-loading-dynamic-class/4.png\" alt=\"check if class already defined\"></p>\n<p>Why not just only parse the file without saving it to metaspace?</p>\n<p>In my gusse:</p>\n<ul>\n<li><p>In java code, most of class definition is done by <code>ClassLoader#loadClass()</code> which checks the class name before vm method invoked.</p>\n<p><img src=\"/2022/03/17/jvm-metaspace-leakage-caused-by-loading-dynamic-class/5.png\" alt=\"loadClass in java\"></p>\n</li>\n<li><p>There is not so many chances that class file format is bad (ClassFormatError), so it will be a large waste that parse class file and then dellocate the memory and then parse it again if system dictionary dosn’t contain the same class handler.</p>\n</li>\n</ul>\n<h2 id=\"Class-data-GC-in-metaspace\"><a href=\"#Class-data-GC-in-metaspace\" class=\"headerlink\" title=\"Class data GC in metaspace\"></a>Class data GC in metaspace</h2><p>Actually there is no specific GC behavior in metaspace, in VM the GC always works in heap, but the pointer pointed to class data in metaspace is saved in class instance which lives in heap. So if the class instance is time to be collected, the class data in metaspace will be freed to.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"cause\"><a href=\"#cause\" class=\"headerlink\" title=\"cause\"></a>cause</h2><p>Define several classes with certain <code>name</code> by using <code>ClassLoader#defineClass</code> , no matter the <code>name</code> is specified or not, the HotSpot JVM always throws OOM in metaspace at last.</p>\n<h2 id=\"behavior-of-ClassLoader-defineClass\"><a href=\"#behavior-of-ClassLoader-defineClass\" class=\"headerlink\" title=\"behavior of ClassLoader#defineClass\"></a>behavior of <code>ClassLoader#defineClass</code></h2><p><img src=\"/2022/03/17/jvm-metaspace-leakage-caused-by-loading-dynamic-class/0.png\" alt=\"defineClass\"></p>\n<p><code>ClassLoader#defineClass</code> is JVM native method, the major steps are:</p>\n<ol>\n<li><p>parse class file and check if class file format is correct</p>\n<p><img src=\"/2022/03/17/jvm-metaspace-leakage-caused-by-loading-dynamic-class/1.png\" alt=\"vm specification\"></p>\n</li>\n<li><p>check <code>systemDictionary</code> with parameter <code>name</code> to determine if Klass&#x2F;KlassHandler is already loaded</p>\n</li>\n</ol>\n<p>(pretend here are some source codes XD)</p>\n<p>But if step-2 exists, why the metaspace memory exhausts at last?</p>\n<h2 id=\"what-actually-happens-when-VM-parsing-class-file\"><a href=\"#what-actually-happens-when-VM-parsing-class-file\" class=\"headerlink\" title=\"what actually happens when VM parsing class file\"></a>what actually happens when VM parsing class file</h2><p>In step-1 mentioned above, HotSpot VM not only parses the class file but save the class data structure (class code, vtable, itable, etc.) to metaspace. so even if the class name is totally the same, there is duplicated class data generated in metaspace, and which is the metaspace OOM cause.</p>\n<p><img src=\"/2022/03/17/jvm-metaspace-leakage-caused-by-loading-dynamic-class/2.png\" alt=\"native define class\"></p>\n<p><img src=\"/2022/03/17/jvm-metaspace-leakage-caused-by-loading-dynamic-class/3.png\" alt=\"find klass in dict\"></p>\n<p><img src=\"/2022/03/17/jvm-metaspace-leakage-caused-by-loading-dynamic-class/4.png\" alt=\"check if class already defined\"></p>\n<p>Why not just only parse the file without saving it to metaspace?</p>\n<p>In my gusse:</p>\n<ul>\n<li><p>In java code, most of class definition is done by <code>ClassLoader#loadClass()</code> which checks the class name before vm method invoked.</p>\n<p><img src=\"/2022/03/17/jvm-metaspace-leakage-caused-by-loading-dynamic-class/5.png\" alt=\"loadClass in java\"></p>\n</li>\n<li><p>There is not so many chances that class file format is bad (ClassFormatError), so it will be a large waste that parse class file and then dellocate the memory and then parse it again if system dictionary dosn’t contain the same class handler.</p>\n</li>\n</ul>\n<h2 id=\"Class-data-GC-in-metaspace\"><a href=\"#Class-data-GC-in-metaspace\" class=\"headerlink\" title=\"Class data GC in metaspace\"></a>Class data GC in metaspace</h2><p>Actually there is no specific GC behavior in metaspace, in VM the GC always works in heap, but the pointer pointed to class data in metaspace is saved in class instance which lives in heap. So if the class instance is time to be collected, the class data in metaspace will be freed to.</p>\n"}],"PostAsset":[{"_id":"source/_posts/jvm-metaspace-leakage-caused-by-loading-dynamic-class/0.png","post":"cl0usz2ma0002fmt1e4sv5dj0","slug":"0.png","modified":1,"renderable":1},{"_id":"source/_posts/jvm-metaspace-leakage-caused-by-loading-dynamic-class/1.png","post":"cl0usz2ma0002fmt1e4sv5dj0","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/jvm-metaspace-leakage-caused-by-loading-dynamic-class/2.png","post":"cl0usz2ma0002fmt1e4sv5dj0","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/jvm-metaspace-leakage-caused-by-loading-dynamic-class/3.png","post":"cl0usz2ma0002fmt1e4sv5dj0","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/jvm-metaspace-leakage-caused-by-loading-dynamic-class/4.png","post":"cl0usz2ma0002fmt1e4sv5dj0","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/jvm-metaspace-leakage-caused-by-loading-dynamic-class/5.png","post":"cl0usz2ma0002fmt1e4sv5dj0","slug":"5.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[],"Tag":[]}}