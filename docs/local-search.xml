<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Heap 堆</title>
    <link href="/2022/08/02/lc-heap/"/>
    <url>/2022/08/02/lc-heap/</url>
    
    <content type="html"><![CDATA[<h2 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a><a href="https://zh.wikipedia.org/wiki/%E5%A0%86%E7%A9%8D">Heap</a></h2><p><a href="https://zh.wikipedia.org/wiki/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91">完全二叉树</a>，且任意一个点的父节点都大于（小于）子节点。</p><h2 id="Max-Heap-amp-Min-Heap"><a href="#Max-Heap-amp-Min-Heap" class="headerlink" title="Max Heap &amp; Min Heap"></a>Max Heap &amp; Min Heap</h2><p>最大&#x2F;最小堆指的是堆顶（根节点）是最大还是最小。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>堆也是完全二叉树，所以除了可以用节点&#x2F;指针的方式来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Heap</span>&#123;<br>    Node root;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-type">int</span> val;<br>    Node left;<br>    Node right;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以用数组来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Heap</span>&#123;<br>    <span class="hljs-type">int</span>[] values;<br>&#125;<br></code></pre></td></tr></table></figure><p>用数组实现时：</p><p><img src="/2022/08/02/lc-heap/max-heap-example.drawio.png" alt="max heap example"></p><p>父子节点的位置关系：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">parentOffset</span><span class="hljs-params">(<span class="hljs-type">int</span> childOffset)</span>&#123;<br>    <span class="hljs-keyword">return</span> childOffset / <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">leftChildOffset</span><span class="hljs-params">(<span class="hljs-type">int</span> parentOffset)</span>&#123;<br>    <span class="hljs-keyword">return</span> parentOffset * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">rightChildOffset</span><span class="hljs-params">(<span class="hljs-type">int</span> parentOffset)</span>&#123;<br>    <span class="hljs-keyword">return</span> parentOffset * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>从尾部插入，然后跟父节点比较，不满足最大（最小）二叉堆性质则交换位置直到满足性质或者达到最顶部：</p><p><img src="/2022/08/02/lc-heap/min-heap-insertion.0.drawio.png" alt="min heap insertion, 19 is smaller than 29"></p><p><img src="/2022/08/02/lc-heap/min-heap-insertion.1.drawio.png" alt="min heap insertion, 19 is smaller than 22"></p><p><img src="/2022/08/02/lc-heap/min-heap-insertion.2.drawio.png" alt="min heap insertion, compare 19 with 18"></p><p><img src="/2022/08/02/lc-heap/min-heap-insertion.3.drawio.png" alt="min heap insertion, 19 is bigger than 18"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// min heap</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span>&#123;<br>    <span class="hljs-keyword">if</span>(isFull()) resize();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> size, parentOffset = parentOffset(offset);<br>    <span class="hljs-comment">// 先插入到尾部</span><br>    values[offset] = val;<br>    <span class="hljs-comment">// 与父节点对比交换</span><br>    <span class="hljs-keyword">while</span>(values[parentOffset] &gt; value[offset])&#123;<br>        <span class="hljs-comment">// sift(int, int)</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> values[parentOffset];<br>        values[offset] = tmp;<br>        values[parentOffset] = val;<br>    &#125;<br>    size++;<br>&#125;<br><br><span class="hljs-comment">// 扩容</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">resize</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>插入的元素从底部向上的这个过程可以称作：percolate up（上滤）</p><h3 id="删除顶部"><a href="#删除顶部" class="headerlink" title="删除顶部"></a>删除顶部</h3><p>删除顶部节点后需要重新调整原来的子树，比如：</p><p><img src="/2022/08/02/lc-heap/min-heap-deletion.0.drawio.png" alt="min heap deletion"></p><p><img src="/2022/08/02/lc-heap/min-heap-deletion.1.drawio.png" alt="min heap deletion"></p><p>每次移动节点的时候会出现空缺，原来的子节点都需要比较然后向前移动，比较麻烦，那么可以换种策略，在删除顶部节点后将最后一个节点移动到顶部，然后从上向下比较交换节点直到恢复堆性质：</p><p><img src="/2022/08/02/lc-heap/min-heap-deletion-opt.0.drawio.png" alt="min heap deletion optimization"></p><p><img src="/2022/08/02/lc-heap/min-heap-deletion-opt.1.drawio.png" alt="min heap deletion optimization"></p><p><img src="/2022/08/02/lc-heap/min-heap-deletion-opt.2.drawio.png" alt="min heap deletion optimization"></p><p><img src="/2022/08/02/lc-heap/min-heap-deletion-opt.3.drawio.png" alt="min heap deletion optimization"></p><p>从上向下比较交换的时候需要同时比较左右两个字节点，要与两个字节点中最小（最大）的交换来恢复堆性质。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// min heap</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">deleteMin</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">if</span>(isEmpty()) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 将尾部插入到顶部</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, leftChildOffset = -<span class="hljs-number">1</span>, rightChildOffset = -<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> values[offset];<br>    values[offset] = values[size - <span class="hljs-number">1</span>];<br>    <span class="hljs-comment">// 和左右子节点对比交换</span><br>    <span class="hljs-comment">// *note: 这里要校验是否存在左右节点</span><br>    <span class="hljs-keyword">while</span>(values[offset] &gt; values[(leftChildOffset = leftChildOffset(offset))] ||<br>        values[offset] &gt; values[(rightChildOffset = rightChildeOffset(offset))])&#123;<br>            <span class="hljs-keyword">if</span>(values[leftChildOffset] &gt; values[rightChildOffset])&#123;<br>                <span class="hljs-comment">// 左&lt;右</span><br>                <span class="hljs-keyword">if</span>(values[leftChildOffset] &gt; values[offset])&#123;<br>                    <span class="hljs-comment">// 左&lt;顶</span><br>                    sift(offset, leftChildOffset);<br>                    offset = leftChildOffset;<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">// 右&lt;左</span><br>                <span class="hljs-keyword">if</span>(values[rightChildOffset] &gt; values[offset])&#123;<br>                    <span class="hljs-comment">// 右&lt;顶</span><br>                    sift(offset, rightChildOffset);<br>                    offset = rightChildOffset;<br>                &#125;<br>            &#125;<br>    &#125;<br>    size--;<br>    <span class="hljs-keyword">return</span> min;<br>&#125;<br><br><span class="hljs-comment">// 交换元素</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">sift</span><span class="hljs-params">(<span class="hljs-type">int</span> offset, <span class="hljs-type">int</span> otherOffset)</span>&#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>删除顶部元素的这个从顶部向下交换的过程称作：percolate down（下滤）</p>]]></content>
    
    
    <categories>
      
      <category>伸展运动</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>data structures</tag>
      
      <tag>leetcode</tag>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hash Table 散列表</title>
    <link href="/2022/08/01/lc-hash-table/"/>
    <url>/2022/08/01/lc-hash-table/</url>
    
    <content type="html"><![CDATA[<h2 id="Hash-Table"><a href="#Hash-Table" class="headerlink" title="Hash Table"></a><a href="https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8">Hash Table</a></h2><h3 id="Hash函数"><a href="#Hash函数" class="headerlink" title="Hash函数"></a>Hash函数</h3><h4 id="直接定址"><a href="#直接定址" class="headerlink" title="直接定址"></a>直接定址</h4><ul><li>hash(k) &#x3D; k，用key</li><li>hash(k) &#x3D; ak + b，key相关的<code>线性函数</code></li></ul><p>适用key集中的情况，如果key分散的话空间浪费会比较严重。</p><h4 id="数字分析"><a href="#数字分析" class="headerlink" title="数字分析"></a>数字分析</h4><p>找出key的规律，利用规律降低冲突（和直接定址的线性函数有一点重叠，但是数字分析重点是规律，也就不局限于‘线性’），比如用身份证的月日加上后四位。</p><h4 id="平方取中"><a href="#平方取中" class="headerlink" title="平方取中"></a>平方取中</h4><p><a href="https://zh.wikipedia.org/wiki/%E5%B9%B3%E6%96%B9%E5%8F%96%E4%B8%AD%E6%B3%95">平方取中</a>是一种‘伪随机数算法’，可以得到特定长度内的伪随机数。</p><h4 id="折叠"><a href="#折叠" class="headerlink" title="折叠"></a>折叠</h4><p>按位数分割，然后各部分叠加，舍去进位。</p><h4 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h4><p><a href="#%E5%B9%B3%E6%96%B9%E5%8F%96%E4%B8%AD">平方取中</a>算是其中一种。</p><h4 id="取余"><a href="#取余" class="headerlink" title="取余"></a>取余</h4><p>最大长度m，选取一个数p不大于m，</p><p>hash(k) &#x3D; k mod p, p &lt; m</p><h3 id="冲突解决方案"><a href="#冲突解决方案" class="headerlink" title="冲突解决方案"></a>冲突解决方案</h3><h4 id="开放定址"><a href="#开放定址" class="headerlink" title="开放定址"></a>开放定址</h4><p>hash_i &#x3D; (hash(k) + d_i) mod m, 其中m是最大长度，i是定址次数，d_i是第i次的序列：</p><ul><li>线性探测，d&#x3D;1,2,3…</li><li>平方探测，d&#x3D;1^2,2^2,3^2…</li><li>伪随机探测，d&#x3D;ran(k)</li></ul><p>开放定址的hash函数要求比较高，需要非常均匀，否则一旦出现聚集插入数据时就会增加定址次数</p><h4 id="单独链表"><a href="#单独链表" class="headerlink" title="单独链表"></a>单独链表</h4><p>在冲突的位置放置链表</p><h4 id="双散列"><a href="#双散列" class="headerlink" title="双散列"></a>双散列</h4><p>hash两次</p><h4 id="再散列"><a href="#再散列" class="headerlink" title="再散列"></a>再散列</h4><p>准备一堆hash函数，然后冲突了就套娃：</p><p>k_i &#x3D; hash_i-1(….(k))</p><h4 id="公共溢出区"><a href="#公共溢出区" class="headerlink" title="公共溢出区"></a>公共溢出区</h4><p>比如准备一个链表，和单独链表有点像，只不过这里的链表是放在“公共”区的，冲突的元素都放在一个链表里，当然用别的数据结构也可以。</p><h3 id="Load-factor"><a href="#Load-factor" class="headerlink" title="Load factor"></a>Load factor</h3><p>元素个数&#x2F;表长度，由于即使hash足够均匀，最终的元素必须放置在小于表长度的位置中，留给余下的元素的位置越少，产生冲突的概率越大。</p><p>证明：</p><p>假设有一个长度为m、load factor为a的表，且hash函数h(k)十分均匀，</p><p>那么可以得出，在写入第n个元素时冲突的概率p为<code>1/(m-(n-1))，n &lt;= a*m</code>,</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs text">当a = 0.8<br>    n=1，m=10时，p=1/10<br>    n=2，m=10时，p=1/9<br>    ...<br>    n=8，m=10时，p=1/3<br>    n=9，因为此时9 &gt; 0.8 * 10，不满足n &lt;= a*m，需要对表扩容或者不再写入，因此a=0.8时最大的冲突概率为1/3<br>再<br>当a = 0.6<br>    n=1，m=10时，p=1/10<br>    ...<br>    n=6，m=10时，p=1/5<br>    n=7，此时原因同上，a=0.6时最大的冲突概率为1/5<br></code></pre></td></tr></table></figure><p>因此，在相同的hash函数下，load factor理论上越小，冲突的概率越小，但是load factor过于小会造成空间的浪费。</p><h3 id="性能因素"><a href="#性能因素" class="headerlink" title="性能因素"></a>性能因素</h3><ol><li>hash的均匀程度（冲突概率，冲突必然增加开销）</li><li>冲突解决方案<ol><li>比如单链增加空间开销和时间开销、开放定址增加时间开销、再散列增加时间开销等</li><li>各种冲突方案的开销并不是定量的，比如单链增加的时间开销和开放定址增加的时间开销并不相当，需要考虑开放定址的hash函数算法的时间复杂度与链表查询的时间复杂度，且即使开放定址的hash函数时间复杂度为O(n)，其n的常数系数也大概率与链表的不同</li></ol></li><li>load factor（冲突概率）</li></ol><h3 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h3><p>数据结构部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 散列表</span><br><span class="hljs-comment"> * 冲突策略：单链</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HashTable</span>&#123;<br>    Node[] hashSlots;<br>    <span class="hljs-comment">// 散列槽数量</span><br>    <span class="hljs-type">int</span> slotsSize;<br>    <span class="hljs-comment">// 当前元素数量</span><br>    <span class="hljs-type">int</span> elementCount;<br>    <span class="hljs-comment">// load factor</span><br>    <span class="hljs-type">float</span> <span class="hljs-variable">loadFactor</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.6f</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>    Object key;<br>    Object object;<br>    <span class="hljs-comment">// 下一个节点</span><br>    Node next;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>伸展运动</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>data structures</tag>
      
      <tag>leetcode</tag>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Skip List 跳跃表</title>
    <link href="/2022/07/27/lc-skip-list/"/>
    <url>/2022/07/27/lc-skip-list/</url>
    
    <content type="html"><![CDATA[<h2 id="Skip-List"><a href="#Skip-List" class="headerlink" title="Skip List"></a><a href="https://en.wikipedia.org/wiki/Skip_list">Skip List</a></h2><p>论文地址：<a href="https://15721.courses.cs.cmu.edu/spring2018/papers/08-oltpindexes1/pugh-skiplists-cacm1990.pdf">Skip Lists: A Probabilistic Alternative to Balanced Trees</a></p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>从最顶层开始，沿着链表指针向右查找到下一个节点值不小于查询值或者不存在下一个节点时，向下一层链表移动继续查找，直到进行至第一层，此时如果下一个节点值等于查找值则查找成功，否则查找失败：</p><p>这里分为两个子查询逻辑：</p><ol><li>在某一层的查询逻辑（向右查询）<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 假设当前遍历节点为x</span><br><span class="hljs-keyword">while</span> x节点的次节点key &lt; searchKey <span class="hljs-keyword">do</span><br>        x = x次节点<br></code></pre></td></tr></table></figure></li><li>在某个节点的查询逻辑（向下查询）<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 假设当前层序为i</span><br><span class="hljs-keyword">for</span> i to <span class="hljs-number">1</span> <span class="hljs-keyword">do</span><br>    同层查询<br></code></pre></td></tr></table></figure></li></ol><p>所以整体的查询算法实现：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs lua">Search(list, searchKey)<br>    x := list→header<br>    <span class="hljs-comment">-- loop invariant: x→key &lt; searchKey</span><br>    <span class="hljs-comment">-- 向下查询</span><br>    <span class="hljs-keyword">for</span> i := list→level downto <span class="hljs-number">1</span> <span class="hljs-keyword">do</span><br>        <span class="hljs-comment">-- 同层查询</span><br>        <span class="hljs-keyword">while</span> x→forward[i]→key &lt; searchKey <span class="hljs-keyword">do</span><br>            x := x→forward[i]<br>    <span class="hljs-comment">-- x→key &lt; searchKey ≤ x→forward[1]→key</span><br>    x := x→forward[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">if</span> x→key = searchKey <span class="hljs-keyword">then</span> <span class="hljs-keyword">return</span> x→value<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> failure<br></code></pre></td></tr></table></figure><h3 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a>插入和删除</h3><p>通过查询查找到符合条件的节点x（x的次节点不存在或者次节点不小于查找值），有两点需要注意：</p><ol><li>为了在插入或者删除的时候能够更新每一层的元素，需要在<code>某一层查找</code>结束向下层移动前记录当时的节点。</li><li>在插入或者删除后要更新最高层，插入时可能层数+1，删除时则可能最大层数-1。</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs lua">Insert(list, searchKey, newValue)<br>    <span class="hljs-comment">-- update数组/list用来存放每一层在插入后需要更新的节点</span><br>    <span class="hljs-keyword">local</span> update[<span class="hljs-number">1.</span>.MaxLevel]<br>    x := list→header<br>    <span class="hljs-keyword">for</span> i := list→level downto <span class="hljs-number">1</span> <span class="hljs-keyword">do</span><br>        <span class="hljs-keyword">while</span> x→forward[i]→key &lt; searchKey <span class="hljs-keyword">do</span><br>            x := x→forward[i]<br>        <span class="hljs-comment">-- x→key &lt; searchKey ≤ x→forward[i]→key</span><br>        update[i] := x<br>    x := x→forward[<span class="hljs-number">1</span>]<br>    <span class="hljs-comment">-- 如果查找成功则不会进行插入，当然也存在允许重复值插入的“变种”跳跃表</span><br>    <span class="hljs-keyword">if</span> x→key = searchKey <span class="hljs-keyword">then</span> x→value := newValue<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-comment">-- randomLevel给出当前插入的节点最高需要插入到第几层</span><br>        lvl := randomLevel()<br>        <span class="hljs-comment">-- 如果高于当前最高层，需要更新update数组/list，并更新最高层数</span><br>        <span class="hljs-keyword">if</span> lvl &gt; list→level <span class="hljs-keyword">then</span><br>            <span class="hljs-keyword">for</span> i := list→level + <span class="hljs-number">1</span> to lvl <span class="hljs-keyword">do</span><br>                update[i] := list→header<br>            list→level := lvl<br>        x := makeNode(lvl, searchKey, value)<br>        <span class="hljs-comment">-- 遍历每层，更新update中的节点的次节点指针（链表插入操作）</span><br>        <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> to level <span class="hljs-keyword">do</span><br>            x→forward[i] := update[i]→forward[i]<br>            update[i]→forward[i] := x<br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs lua">Delete(list, searchKey)<br>    <span class="hljs-keyword">local</span> update[<span class="hljs-number">1.</span>.MaxLevel]<br>    x := list→header<br>    <span class="hljs-keyword">for</span> i := list→level downto <span class="hljs-number">1</span> <span class="hljs-keyword">do</span><br>        <span class="hljs-keyword">while</span> x→forward[i]→key &lt; searchKey <span class="hljs-keyword">do</span><br>            x := x→forward[i]<br>        update[i] := x<br>    x := x→forward[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">if</span> x→key = searchKey <span class="hljs-keyword">then</span><br>        <span class="hljs-comment">-- 删掉每一层的节点</span><br>        <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span> to list→level <span class="hljs-keyword">do</span><br>            <span class="hljs-keyword">if</span> update[i]→forward[i] ≠ x <span class="hljs-keyword">then</span> <span class="hljs-keyword">break</span><br>            update[i]→forward[i] := x→forward[i]<br>        free(x)<br>        <span class="hljs-comment">-- 删除因节点被删而空掉（指向NIL）的层</span><br>        <span class="hljs-keyword">while</span> list→level &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <br>          list→header→forward[list→level] = NIL <span class="hljs-keyword">do</span><br>            list→level := list→level – <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>关于<code>randomLevel()</code>，论文里也给出了探讨建议。</p><p>记预期的i+1层节点数与i层节点数的比值为<code>p</code>，则<code>p</code>为1&#x2F;2表示i层有一半的节点会在i+1层出现（1&#x2F;2拥有i层指针的节点也拥有i+1层的指针）,那么新插入的节点应该最高到第几层呢？从第一层开始每一层这个新节点有<code>p</code>的概率能拥有+1层的指针：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua">randomLevel()<br>    lvl := <span class="hljs-number">1</span><br>    <span class="hljs-comment">-- random() that returns a random value in [0...1)</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">random</span>() &lt; p <span class="hljs-keyword">and</span> lvl &lt; MaxLevel <span class="hljs-keyword">do</span><br>        lvl := lvl + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> lvl<br></code></pre></td></tr></table></figure><p>关于从第几层开始搜索，论文的<code>At what level do we start a search? Defining L(n)</code>部分也给出了几种方案，不过综合来看从最高层开始搜索也并不会有什么大问题，实现也较为简单。</p><p>其中提出的可以用来计算层数<code>L(n)</code>的公式还是比较重要的：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">L(n) = log1/p n<br></code></pre></td></tr></table></figure><p><code>p</code>同上，指某一层的节点能够拥有更高一层的指针的概率，<code>n</code>是指skip list中的元素数量（等同于第一层的节点数）</p><p>例：</p><p><em>已知n&#x3D;16，p&#x3D;1&#x2F;2，合适的maxLevel&#x3D;4</em></p><p><em>已知maxLevel&#x3D;16，p&#x3D;1&#x2F;3，存放n&#x3D;3^16元素会比较合理</em></p><h3 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h3><p>数据结构部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 跳跃表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SkipList</span>&#123;<br>    Node head;<br>    <span class="hljs-comment">// 当前层数</span><br>    <span class="hljs-type">int</span> level;<br>    <span class="hljs-comment">// 最大层数</span><br>    <span class="hljs-type">int</span> maxLevel;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 链表节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>    Object key;<br><br>    <span class="hljs-comment">// 存放层指针</span><br>    Node[] forward;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>伸展运动</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>data structures</tag>
      
      <tag>leetcode</tag>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TODO list</title>
    <link href="/2022/07/25/todo-list/"/>
    <url>/2022/07/25/todo-list/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="パスワードが不一致。" data-whm="不具合のため、一時的に復号化されます。">  <script id="hbeData" type="hbeData" data-hmacdigest="6706c57984e75cf91531d1d0bf6c3902931cefe1848113b5f8eb78e70c19a7a7">c78128bf525680635b87b5a4a4e1152badc41a4e4257cc09c6b8367c82ea66ca7899062f5d85f93756704829b26113f86074ca91b8d1f833c77d86d718f6fa0ecd228e1af4366acb20cc596ec0d529c44582e2f06f497342205cd0a3595ed34f8a491715fd6fd3129782ff7fbbfb762ba6dbe5228bcdce6f5a8282bc3d34ed153d27cf7e773a4bbb88f6bf9c5d448171f519e6088433cc6743301638587cb68127d193cec85991888983bf46f9b8695c66e16187111a165c6183933cfbd3470e7f1da8a2f001c67c59e90e9320537a6f91f53f58d1e23b2a3b175877df2fed2ab27a23c1a59483daa43c21ad7863ecfa64d506499d0a777b22af49f00b3067dbde25f7746141b5e58eb2d250f5ae63485b95a6a9470e67d4b6954d9df5da4787ddc4c668e4ce443963a961edd7612f72530685c90a618118de2b12d27756d87ff23377b199160bc3b26e8902e54fa9552b44845e6189dd17d2d4784f70fc3ca21e2adcb97fb68a6db64302c9436bcd51ab06c47a86939e7c386f1b3828a75b92532304ede0ce01c30ea461720b551c21a091d909a68e1781ab5137af516739f09c973c64bdfcb6e02a0629c774ce5ae2cbcd434136ddbfbe78995015bd34235753535c5ba9e816be9e205c2612fdc86e91c424742c96805f0384e24e81c72a41dd3878b12f83805d4a69eccffdc481c5483019dbcca5c1e70051f7af4cfe4469ef9bb5adb9c58441d02850586cb51f4b8fba9223d64d633d079ea6c52c016e7712656607b4eaec791c996177819f622dae39e1519bdf45596ca6d28131785ca51e9a587c724774e5ad3241088fa18bd2fe5bb1911526ab281cf0a9b79f92b74882980762ffca0b1e204227ba5b6468337989f59c68ee42dff511d6580047c1a9e8946d5903d1cc5669b4f82c9415319a003309f1ec4651f1cf94f1a5eb275f2acb4ea4c67b67e16a8d0b590f67382cf77734ffa6123bb1f0c8b67cee324762baf014db326807334d89daec525bf171d135c38c206f341a50e6aec8dcd5b47226958810b331410039300d3cef1aaa938edc13ac606f43095027310cced12519bdeac5908a2877c0c7bee09c9ee7de8b7c430261f11c30b025dd9216145eb40ec89dd738792c8aa9d4df25e52519dabe63154995aaba9559ce07120f24483b35be5d44fb31ce46a810e8e43526a0a80b9ca9a00f472af454d708df793c24e9c73ad1411f319a352e0a607f25d5fd9ca02180693ce7b55b10133b5245f2c3c3223aa7250f092e7ddc8e14221c17419f8b34709363a916fa2724a64e9cfba2a220a653e4038e2a37b1669e0fb304f5b790cf28c9ac58c106dddacdf1485c6c0ae0c6aa515956732e802dca3adbcff7a22c2035a1c37ea749263618f54a74ed6e769992f29e9766ff448bae109a5ea9c987e6722785ad92dc4b24e441cd06a08a0ba3d07d797a481083e0e7fad722c01fb0a82ae38a16496b7e9a382180a17e9a2d78</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">これは暗号化されている内容です。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>草稿</category>
      
    </categories>
    
    
    <tags>
      
      <tag>todo list</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用Spring工具解析带fragment的Url时异常</title>
    <link href="/2022/07/20/url-parsing-issue/"/>
    <url>/2022/07/20/url-parsing-issue/</url>
    
    <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>用<a href="/2022/06/14/useful-utils/index.html#UriComponents">UriComponents</a>解析url的时候报<code>IllegalArgumentException</code>。</p><p>传入解析的url：<code>www.xxxx.com/p#/f</code>，特点是带上了fragment<code>#/f</code></p><ul><li><a href="https://datatracker.ietf.org/doc/html/rfc3986">RFC3986</a></li></ul><p><img src="/2022/07/20/url-parsing-issue/rfc3986_url_segments.png" alt="RFC3986"></p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p><code>fromHttpUrl(String)</code>的匹配规则是：</p><ul><li>PATH部分不允许<code>?</code>或<code>#</code>出现</li><li><code>?</code>后作为一个整体</li></ul><p>也就是<code>www.xxxx.com/p#/f</code>里<code>/p</code>被解析为了path部分，<code>#/f</code>是不合法的部分。而<code>www.xxxx.com/p?#/f</code>这种是可以的，其中<code>?#/f</code>被解析为一个整体。</p><p><img src="/2022/07/20/url-parsing-issue/uriComponents_parsing_regex.png" alt="5.2.8之前的spring解析url的匹配规则"></p><p><a href="https://github.com/spring-projects/spring-framework/issues/25300">ISSUE#25300</a> : Support fragments in UriComponentsBuilder.fromHttpUrl() </p><p>在<code>5.2.8.RELEASE</code>中spring已经将修复代码合并：<br><img src="/2022/07/20/url-parsing-issue/spring-issue-commit.png" alt="commit"></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol><li>升级spring到5.2.8.RELEASE及以上版本</li><li>用<code>fromUriString(String)</code>替换<code>fromHttpUrl(String)</code>，schema的部分自行判断一下</li></ol>]]></content>
    
    
    <categories>
      
      <category>群英荟萃</category>
      
      <category>BUG草集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>URI</tag>
      
      <tag>issue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Project Loom 预览</title>
    <link href="/2022/07/14/project-loom-preview/"/>
    <url>/2022/07/14/project-loom-preview/</url>
    
    <content type="html"><![CDATA[<h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><blockquote><p>主页：<a href="https://openjdk.org/projects/loom/">https://openjdk.org/projects/loom/</a></p><p>提案：<a href="http://cr.openjdk.java.net/~rpressler/loom/Loom-Proposal.html">http://cr.openjdk.java.net/~rpressler&#x2F;loom&#x2F;Loom-Proposal.html</a></p><p>预览：<a href="https://jdk.java.net/loom/">https://jdk.java.net/loom/</a></p></blockquote><h2 id="EA-in-JDK19"><a href="#EA-in-JDK19" class="headerlink" title="EA in JDK19"></a>EA in JDK19</h2><blockquote><p><a href="https://github.com/Attt/Loom-Preview">https://github.com/Attt/Loom-Preview</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建builder</span><br>Thread.Builder.<span class="hljs-type">OfVirtual</span> <span class="hljs-variable">ofVirtual</span> <span class="hljs-operator">=</span> Thread.ofVirtual()<br>        <span class="hljs-comment">// 名称，start表示种子1步进递增</span><br>        .name(<span class="hljs-string">&quot;virtual-thread-&quot;</span>, <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">// 是否允许set threadLocal</span><br>        .allowSetThreadLocals(<span class="hljs-literal">true</span>)<br>        <span class="hljs-comment">// 是否允许使用可继承的threadLocal</span><br>        .inheritInheritableThreadLocals(<span class="hljs-literal">true</span>)<br>        <span class="hljs-comment">// 未捕获异常处理器</span><br>        .uncaughtExceptionHandler((t, e) -&gt; &#123;<br>            System.out.println(t);<br>            e.printStackTrace();<br>        &#125;);<br><br><span class="hljs-comment">// 执行</span><br>ofVirtual.start(() -&gt; &#123;<br>    <span class="hljs-comment">// do something</span><br>    System.out.println(Thread.currentThread().getName());<br>    System.out.println(Thread.currentThread().isDaemon());<br>    System.out.println(Thread.currentThread().isVirtual());<br>&#125;).join();<br><br><span class="hljs-comment">// 预设任务，返回Thread实例</span><br><span class="hljs-type">Thread</span> <span class="hljs-variable">unstarted</span> <span class="hljs-operator">=</span> ofVirtual<br>        .unstarted(() -&gt; &#123;<br>            System.out.println(Thread.currentThread().getName());<br>            System.out.println(<span class="hljs-string">&quot;Wooooow!&quot;</span>);<br>        &#125;);<br><span class="hljs-comment">// 开启任务</span><br>unstarted.start();<br><br><span class="hljs-comment">// 基于Executors#newThreadPerTaskExecutor，使用VirtualThreadFactory作为线程工厂</span><br><span class="hljs-comment">// 为每个提交的任务开启一个thread，无界</span><br><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">virtualThreadPerTaskExecutor</span> <span class="hljs-operator">=</span> Executors.newVirtualThreadPerTaskExecutor();<br>virtualThreadPerTaskExecutor.submit(() -&gt; &#123;<br>    System.out.printf(<span class="hljs-string">&quot;%s-newVirtualThreadPerTaskExecutor %n&quot;</span>, Thread.currentThread().getName());<br>&#125;);<br><br><span class="hljs-comment">// 使用builder的设置值创建的perTaskExecutor</span><br><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">perTaskExecutor</span> <span class="hljs-operator">=</span> Executors.newThreadPerTaskExecutor(ofVirtual.factory());<br>perTaskExecutor.submit(() -&gt; &#123;<br>    System.out.printf(<span class="hljs-string">&quot;%s-newThreadPerTaskExecutor %n&quot;</span>, Thread.currentThread().getName());<br>&#125;);<br><br><span class="hljs-comment">// 结构化并发</span><br>StructuredTaskScope.<span class="hljs-type">ShutdownOnFailure</span> <span class="hljs-variable">shutdownOnFailure</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StructuredTaskScope</span>.ShutdownOnFailure();<br>shutdownOnFailure.fork(() -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;taskA&quot;</span>);<br>    TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;error occurred in taskA&quot;</span>);<br>&#125;);<br><br>shutdownOnFailure.fork(() -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;taskB...&quot;</span>);<br>    TimeUnit.SECONDS.sleep(<span class="hljs-number">5</span>);<br>    System.out.println(<span class="hljs-string">&quot;taskB is finished.&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;);<br><br><span class="hljs-keyword">try</span> &#123;<br>    shutdownOnFailure.joinUntil(LocalDateTime.now().plusSeconds(<span class="hljs-number">10</span>).toInstant(ZoneOffset.UTC));<br>&#125; <span class="hljs-keyword">catch</span> (TimeoutException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Benchmark"><a href="#Benchmark" class="headerlink" title="Benchmark"></a>Benchmark</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Benchmark                                  Mode  Cnt     Score     Error   Units<br>ThreadThroughputBenchmark.platformThread  thrpt    <span class="hljs-number">5</span>    <span class="hljs-number">10.788</span> ±   <span class="hljs-number">0.677</span>  ops/ms<br>ThreadThroughputBenchmark.virtualThread   thrpt    <span class="hljs-number">5</span>  <span class="hljs-number">4201.740</span> ± <span class="hljs-number">475.806</span>  ops/ms<br></code></pre></td></tr></table></figure><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><ol><li>命名</li></ol><ul><li><a href="https://mail.openjdk.org/pipermail/loom-dev/2019-November/000864.html">Virtual Threads: A Short Note about Naming</a></li></ul><ol start="2"><li>为什么不用类似于await&#x2F;async提供的协作调度？协作调度能够明确调度点在哪里，也能简化并发编程？</li></ol><ul><li>Java已经有基于抢占式调度的线程，增加协作调度只会增加兼容问题</li><li>协作调度是一种较差的调度方案，协作调度意味着每个操作都是在临界区发生的不能互相交错，明确定义了交错的点，抢占式调度正相反，明确了不能交错的地方，使得交错能够发生在其他的任何地方，对于服务端来说大多数操作对调度点并不敏感不明确的交错可以更高效，而且每一次添加调度点也需要考虑更多的事情</li></ul><h2 id="关于并发编程的吐槽：函数颜色问题"><a href="#关于并发编程的吐槽：函数颜色问题" class="headerlink" title="关于并发编程的吐槽：函数颜色问题"></a>关于并发编程的吐槽：函数颜色问题</h2><p><a href="http://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/">what-color-is-your-function</a>，假设某种语言中一种函数是<font color='red'>红色</font>的，另一种函数是<font color='#0099ff'>蓝色</font>的：</p><p>那么这种语言实际存在两种<code>function</code>关键字：<code>blue_func</code>和<code>red_func</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">blue_func <span class="hljs-title function_">sync</span>(<span class="hljs-params"></span>)&#123;...&#125;<br><br>red_func <span class="hljs-title function_">async</span>(<span class="hljs-params">callback</span>)&#123;...&#125;<br></code></pre></td></tr></table></figure><p>其中，<font color='red'>红色</font>函数的结果不通过方法返回，而是传递给参数中的函数，那么就会有这样的问题：</p><ul><li>在<font color='red'>红色</font>函数中可以调用<font color='#0099ff'>蓝色</font>函数，因为<font color='#0099ff'>蓝色</font>函数的返回值通过方法返回能够拿到。</li><li>而在<font color='#0099ff'>蓝色</font>函数中是不能轻易调用<font color='red'>红色</font>函数的，因为结果已经传递到<font color='red'>红色</font>函数的参数函数里了，在<font color='#0099ff'>蓝色</font>函数线性执行过程中不能保证能够从<font color='red'>红色</font>函数的参数函数里获取结果。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">red_func <span class="hljs-title function_">async</span>(<span class="hljs-params">callback</span>)&#123;<br>    <span class="hljs-title function_">sync</span>() <span class="hljs-comment">// 可以调用</span><br>&#125;<br><br>blue_func <span class="hljs-title function_">sync</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">async</span>(callback) <span class="hljs-comment">// 不能调用</span><br>&#125;<br></code></pre></td></tr></table></figure><p>所谓的<font color='red'>红色</font>函数就是异步函数，上面的这个“颜色问题”就是“回调地狱”(“callback hell”)的另一种感受方法😅。</p><p>在函数式编程中，异步存在两个比较炸裂的问题：1. 回调地狱😅；2. 一个被广泛使用的同步函数的异步化所需要的大量的修改和重写量可以让任何一个开发直接爆炸：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript">func <span class="hljs-title function_">syncC</span>(<span class="hljs-params">shit</span>)&#123;<br>    printf <span class="hljs-string">&quot;shit is %s&quot;</span>, shit<br>&#125;<br><br>func <span class="hljs-title function_">asyncB</span>(<span class="hljs-params">callbackB</span>)&#123;<br>    <span class="hljs-keyword">var</span> b<br>    <span class="hljs-comment">// do something</span><br>    <span class="hljs-title function_">callbackB</span>(b)<br>&#125;<br><br>func <span class="hljs-title function_">syncB</span>(<span class="hljs-params">fart</span>)&#123;<br>    printf <span class="hljs-string">&quot;fart is %s&quot;</span>, fart<br>    <span class="hljs-title function_">asyncB</span>(syncC)<br>&#125;<br><br>func <span class="hljs-title function_">asyncA</span>(<span class="hljs-params">callbackA</span>)&#123;<br>    <span class="hljs-keyword">var</span> a<br>    <span class="hljs-comment">// do something</span><br>    <span class="hljs-title function_">callbackA</span>(a)<br>&#125;<br><br>func <span class="hljs-title function_">syncA</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">asyncA</span>(syncB)<br>&#125;<br></code></pre></td></tr></table></figure><p>看到这段代码已经开始焦虑了，如果简化一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">func <span class="hljs-title function_">asyncB</span>(<span class="hljs-params">callbackB</span>)&#123;<br>    <span class="hljs-keyword">var</span> b<br>    <span class="hljs-comment">// do something</span><br>    <span class="hljs-title function_">callbackB</span>(b)<br>&#125;<br><br>func <span class="hljs-title function_">asyncA</span>(<span class="hljs-params">callbackA</span>)&#123;<br>    <span class="hljs-keyword">var</span> a<br>    <span class="hljs-comment">// do something</span><br>    <span class="hljs-title function_">callbackA</span>(a)<br>&#125;<br><br>func <span class="hljs-title function_">syncA</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">asyncA</span>(fart -&gt; &#123;<br>        printf <span class="hljs-string">&quot;fart is %s&quot;</span>, fart<br>        <span class="hljs-title function_">asyncB</span>(shit -&gt; &#123;<br>            printf <span class="hljs-string">&quot;shit is %s&quot;</span>, shit<br>        &#125;)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>有人可以看出是现有fart还是现有shit吗…</p>]]></content>
    
    
    <categories>
      
      <category>基础姿势</category>
      
      <category>并发编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>asynchronization</tag>
      
      <tag>concurrency</tag>
      
      <tag>virtual threads</tag>
      
      <tag>fiber</tag>
      
      <tag>continuations</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Class签名信息不匹配引起的依赖冲突</title>
    <link href="/2022/07/14/java-security-issue/"/>
    <url>/2022/07/14/java-security-issue/</url>
    
    <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>线上某个服务升级zk到<code>3.4.14</code>, 引入依赖后无法启动。</p><p>报错信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">Caused by: java.lang.SecurityException: class <span class="hljs-string">&quot;javax.annotation.ManagedBean&quot;</span><span class="hljs-string">&#x27;s signer information does not match signer information of other classes in the same package</span><br><span class="hljs-string">at java.lang.ClassLoader.checkCerts(ClassLoader.java:891)</span><br><span class="hljs-string">at java.lang.ClassLoader.preDefineClass(ClassLoader.java:661)</span><br><span class="hljs-string">at java.lang.ClassLoader.defineClass(ClassLoader.java:754)</span><br><span class="hljs-string">at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)</span><br><span class="hljs-string">at org.apache.catalina.loader.WebappClassLoaderBase.findClassInternal(WebappClassLoaderBase.java:2408)</span><br><span class="hljs-string">at org.apache.catalina.loader.WebappClassLoaderBase.findClass(WebappClassLoaderBase.java:855)</span><br><span class="hljs-string">at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1327)</span><br><span class="hljs-string">at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1180)</span><br><span class="hljs-string">at java.lang.Class.forName0(Native Method)</span><br><span class="hljs-string">at java.lang.Class.forName(Class.java:348)</span><br></code></pre></td></tr></table></figure><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>原因如错误信息所说，同package下有不同签名信息，属于依赖冲突。<code>javax.annotation.ManagedBean</code>的package是<code>javax.annotation</code>，找一下还有哪个jar里面有这个package：<br><img src="/2022/07/14/java-security-issue/scrshot0.png" alt="搜索图"></p><p>然后找一下这两个包是什么依赖引入的（有一个肯定是zk😊):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn dependency:tree -Dverbose -Dincludes=com.google.code.findbugs,org.eclipse.jetty.orbit<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">+- org.apache.zookeeper:zookeeper:jar:<span class="hljs-number">3.4</span><span class="hljs-number">.14</span>:compile<br>|  \- com.github.spotbugs:spotbugs-annotations:jar:<span class="hljs-number">3.1</span><span class="hljs-number">.9</span>:compile<br>|     \- com.google.code.findbugs:jsr305:jar:<span class="hljs-number">3.0</span><span class="hljs-number">.2</span>:compile<br>\- com.dangdang:elastic-job-lite-lifecycle:jar:<span class="hljs-number">2.1</span><span class="hljs-number">.5</span>:compile<br>   \- com.dangdang:elastic-job-common-restful:jar:<span class="hljs-number">2.1</span><span class="hljs-number">.5</span>:compile<br>      \- org.eclipse.jetty.aggregate:jetty-all-server:jar:<span class="hljs-number">8.1</span><span class="hljs-number">.19</span>.v20160209:compile<br>         +- org.eclipse.jetty.orbit:javax.servlet:jar:<span class="hljs-number">3.0</span><span class="hljs-number">.0</span>.v201112011016:compile<br>         +- org.eclipse.jetty.orbit:javax.security.auth.message:jar:<span class="hljs-number">1.0</span><span class="hljs-number">.0</span>.v201108011116:compile<br>         +- org.eclipse.jetty.orbit:javax.mail.glassfish:jar:<span class="hljs-number">1.4</span><span class="hljs-number">.1</span>.v201005082020:compile<br>         |  \- (org.eclipse.jetty.orbit:javax.activation:jar:<span class="hljs-number">1.1</span><span class="hljs-number">.0</span>.v201105071233:compile - omitted <span class="hljs-keyword">for</span> duplicate)<br>         +- org.eclipse.jetty.orbit:javax.activation:jar:<span class="hljs-number">1.1</span><span class="hljs-number">.0</span>.v201105071233:compile<br>         \- org.eclipse.jetty.orbit:javax.annotation:jar:<span class="hljs-number">1.1</span><span class="hljs-number">.0</span>.v201108011116:compile<br></code></pre></td></tr></table></figure><p>排掉任意一个就OK了，大概率是jetty做了签名，毕竟是个server（可执行代码）。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://stackoverflow.com/questions/2877262/java-securityexception-signer-information-does-not-match">Java SecurityException: signer information does not match</a></p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">This happens when classes belonging to the same package are loaded from different JAR files, and those JAR files have signatures signed with different certificates - or, perhaps more often, at least one is signed and one or more others are not (which includes classes loaded from directories since those AFAIK cannot be signed).<br><br>So either make sure all JARs (or at least those which contain classes from the same packages) are signed using the same certificate, or remove the signatures from the manifest of JAR files with overlapping packages.<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>群英荟萃</category>
      
      <category>BUG草集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>maven</tag>
      
      <tag>dependencies confliction</tag>
      
      <tag>class load</tag>
      
      <tag>class security check</tag>
      
      <tag>bug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中的异步和并发手段</title>
    <link href="/2022/07/10/asynchronization/"/>
    <url>/2022/07/10/asynchronization/</url>
    
    <content type="html"><![CDATA[<h2 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h2><p>基本的异步模型，主要方法有<code>get()</code>、<code>get(time,timeUnit)</code>、<code>isDone()</code>等。</p><h2 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h2><p>支持回调，更好的支持多个异步任务的流程控制，比如先后顺序，成功或失败之后的流转。</p><h3 id="假如有A、B两个任务，B需要在A之后执行："><a href="#假如有A、B两个任务，B需要在A之后执行：" class="headerlink" title="假如有A、B两个任务，B需要在A之后执行："></a>假如有A、B两个任务，B需要在A之后执行：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">CompletableFuture&lt;String&gt; aQuery = CompletableFuture.supplyAsync(() -&gt; &#123;<br>    <span class="hljs-keyword">return</span> queryA();<br>&#125;).exceptionally(e -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;failed to execute aQuery&quot;</span>);<br>    e.printStackTrace();<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;);<br><span class="hljs-comment">//aQuery成功后继续执行bQuery</span><br>CompletableFuture&lt;Double&gt; bQuery = cfQuery.thenApplyAsync(aResult -&gt; &#123;<br>    <span class="hljs-keyword">if</span>(aResult == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> queryB(aResult);<br>&#125;).exceptionally(e -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;failed to execute bQuery&quot;</span>);<br>    e.printStackTrace();<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;);<br><span class="hljs-comment">// bQuery成功后打印结果</span><br>bQuery.thenAccept(System.out::println);<br></code></pre></td></tr></table></figure><p>如果不依赖CompletableFuture的话：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">Future&lt;String&gt; aFuture = asyncQueryA();<br><span class="hljs-type">String</span> <span class="hljs-variable">aResult</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span>&#123;<br>    aResult = aFuture.get();<br>&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>    System.out.println(<span class="hljs-string">&quot;failed to execute asyncQueryA&quot;</span>);<br>    e.printStackTrace();<br>&#125;<br><br><span class="hljs-type">String</span> <span class="hljs-variable">bResult</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(aResult != <span class="hljs-literal">null</span>)&#123;<br>    Future&lt;String&gt; bFuture = asyncQueryB(aResult);<br>    <span class="hljs-keyword">try</span>&#123;<br>        bResult = bFuture.get();<br>    &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>        System.out.println(<span class="hljs-string">&quot;failed to execute asyncQueryB&quot;</span>);<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br>System.out.println(bResult);<br></code></pre></td></tr></table></figure><h3 id="假如有A、B两个任务，A或B任意一个任务执行完成就结束："><a href="#假如有A、B两个任务，A或B任意一个任务执行完成就结束：" class="headerlink" title="假如有A、B两个任务，A或B任意一个任务执行完成就结束："></a>假如有A、B两个任务，A或B任意一个任务执行完成就结束：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//aQuery</span><br>CompletableFuture&lt;String&gt; aQuery = CompletableFuture.supplyAsync(() -&gt; &#123;<br>    <span class="hljs-keyword">return</span> queryA();<br>&#125;).exceptionally(e -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;failed to execute aQuery&quot;</span>);<br>    e.printStackTrace();<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;);<br><span class="hljs-comment">//bQuery</span><br>CompletableFuture&lt;Double&gt; bQuery = cfQuery.thenApplyAsync(() -&gt; &#123;<br>    <span class="hljs-keyword">return</span> queryB();<br>&#125;).exceptionally(e -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;failed to execute bQuery&quot;</span>);<br>    e.printStackTrace();<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;);<br><br>CompletableFuture&lt;Object&gt; aOrBQuery = CompletableFuture.anyOf(aQuery, bQuery);<br><br><span class="hljs-comment">// 任意一个任务成功后打印结果</span><br>aOrBQuery.thenAccept(System.out::println);<br></code></pre></td></tr></table></figure><p>这种情况如果不依赖CompletableFuture的话……：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">Future&lt;String&gt; aFuture = asyncQueryA();<br>Future&lt;String&gt; bFuture = asyncQueryB();<br><span class="hljs-type">int</span> <span class="hljs-variable">failedTask</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>    <span class="hljs-keyword">if</span>(aFuture.isDone())&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            result = aFuture.get();<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;failed to execute asyncQueryA&quot;</span>);<br>            e.printStackTrace();<br>            failedTask++;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(bFuture.isDone())&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            result = bFuture.get();<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;failed to execute asyncQueryB&quot;</span>);<br>            e.printStackTrace();<br>            failedTask++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 不写==2, 防止以后加任务cdef等等时忘记修改这个判断值引起死循环</span><br>    <span class="hljs-keyword">if</span>(failedTask &gt; <span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实现细节和注意点"><a href="#实现细节和注意点" class="headerlink" title="实现细节和注意点"></a>实现细节和注意点</h3><ol><li><code>thenAccept</code>或者<code>exceptionally</code>这种方法是在调用线程中执行的，会阻塞调用线程，<code>supplyAsync</code>或者<code>thenApplyAsync</code>这种名字里带Async的会被提交到线程池执行。</li><li>如果不指定线程池的话，默认使用的是<code>ForkJoinPool</code>的<code>CommonPool</code>线程池（默认的coreSize和poolSize是8还是几来着，反正很少），可能会和其他的任务共享线程池，也许会互相抢占线程资源。</li><li><code>CompletionStage</code>定义流程控制的能力，各种流程组合的实际动作都基于<code>CompletableFuture.Completion</code>实现的类</li></ol><h2 id="Fiber-x2F-Coroutines"><a href="#Fiber-x2F-Coroutines" class="headerlink" title="Fiber&#x2F;Coroutines"></a>Fiber&#x2F;Coroutines</h2><p><a href="/2022/07/14/project-loom-preview/index.html">Project Loom Preview</a></p>]]></content>
    
    
    <categories>
      
      <category>基础姿势</category>
      
      <category>并发编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>asynchronization</tag>
      
      <tag>concurrency</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「に」と「で」作为场所助词时的区别</title>
    <link href="/2022/06/29/jp-ni-de-basyou/"/>
    <url>/2022/06/29/jp-ni-de-basyou/</url>
    
    <content type="html"><![CDATA[<h1 id="例句"><a href="#例句" class="headerlink" title="例句"></a>例句</h1><ol><li>今日はずっと家<code>に</code>います。</li><li>明日はずっと家<code>で</code>ゲームをします。</li><li>あそこ<code>に</code>山が見えます。（あそこ<code>から</code>山が見えます。）</li><li>友達の家<code>に</code>携帯を忘れました。</li><li>友達の家<code>で</code>携帯を無くしました。</li><li>ここ<code>に</code>車を停めてください。・ここ<code>で</code>車を停めでください。</li></ol><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p><code>に</code>作为场所&#x2F;地点助词的时候，表达的是一种静态的结果或者一种状态，<code>で</code>则表达一个动作或者一个行为。</p><blockquote><p>今日はずっと家<code>に</code>います。</p></blockquote><p>表达“存在”是一种状态。</p><blockquote><p>明日はずっと家<code>で</code>ゲームをします。</p></blockquote><p>表达“打游戏”是一个动作。</p><blockquote><p>あそこ<code>に</code>山が見えます。</p></blockquote><p>表达的“能被看见”是一个状态。</p><blockquote><p>友達の家<code>に</code>携帯を忘れました。</p></blockquote><p>表达“落在某处”是一个事实&#x2F;状态。</p><blockquote><p>友達の家<code>で</code>携帯を無くしました。</p></blockquote><p>表达“弄丢”是一个动作。</p><p><code>从“弄丢了”这个动作发生开始，就一直处于”忘了“的状态。</code></p><blockquote><p>ここ<code>に</code>車を停めてください。</p></blockquote><p>把车停在这里，表达的是在这里保持一种停着的状态。</p><blockquote><p>ここ<code>で</code>車を停めでください。</p></blockquote><p>在这里停车，表达的是“停”这个动作，至于“停”完了是保持“停”的状态还是继续发生“动”的后续动作并不是重点。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">再比如说：寝る，有两个意思，一个是“睡觉　眠る”，一个是“躺着 横たわる・横になる”<br><br>「ここで寝る」表示的是在这里睡觉，因为睡觉是个动作，至于你这个动作做了会怎么样那不重要，就在这里睡就完事了。<br><br>「ここに寝る」表示在这里躺着，怎么躺着的不重要，倒下去还是慢慢躺下去或者后空翻接转体三周半摔在上面都不重要，最终变成躺着就可以，只要最后是在ここ躺着的状态都OK。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>基础姿势</category>
      
      <category>日语</category>
      
    </categories>
    
    
    <tags>
      
      <tag>language</tag>
      
      <tag>japanese</tag>
      
      <tag>文法</tag>
      
      <tag>grammar</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文法「ところ」</title>
    <link href="/2022/06/23/jp-tokoro/"/>
    <url>/2022/06/23/jp-tokoro/</url>
    
    <content type="html"><![CDATA[<h1 id="N4"><a href="#N4" class="headerlink" title="N4"></a>N4</h1><h2 id="原型或は意志型・ている・た-＋-ところだ"><a href="#原型或は意志型・ている・た-＋-ところだ" class="headerlink" title="原型或は意志型・ている・た　＋　ところだ"></a>原型或は意志型・ている・た　＋　ところだ</h2><p>動作をするタイミングを表す表現です。</p><blockquote><p>今は寝るところだ。<br>さっきは寝ているところだ。</p></blockquote><h2 id="のところ"><a href="#のところ" class="headerlink" title="のところ"></a>のところ</h2><p>今の状況を表す表現です。</p><blockquote><p>今のところ、寝ることはできない。</p></blockquote><h1 id="N2"><a href="#N2" class="headerlink" title="N2"></a>N2</h1><h2 id="たところ（が）"><a href="#たところ（が）" class="headerlink" title="たところ（が）"></a>たところ（が）</h2><p>逆接を表す表現です。</p><blockquote><p>羊を数えたところが、眠れなっかた。</p></blockquote><h2 id="たところ"><a href="#たところ" class="headerlink" title="たところ"></a>たところ</h2><p>B結果がどうなるかどうか分からず・B結果を期待せずにA行動を行った。<br>A行動はB結果のきっかけだ。</p><blockquote><p>単にベッドに着いたところ、ちゃんと寝る始めた。</p></blockquote><h2 id="ところを"><a href="#ところを" class="headerlink" title="ところを"></a>ところを</h2><p>A動作をする時に、Bが発生した・していた。</p><blockquote><p>寝ているところを騒音に起こした。</p></blockquote><h2 id="ところだった・でした"><a href="#ところだった・でした" class="headerlink" title="ところだった・でした"></a>ところだった・でした</h2><p>A条件が異なれば、B結果になる。<br>B事項が発生する前にA条件で回避したことができた。<br>A条件で、危うくB結果になった。</p><blockquote><p>寝不足のせいで、さっき歩く時寝るところだった。</p></blockquote><h2 id="ところを見ると"><a href="#ところを見ると" class="headerlink" title="ところを見ると"></a>ところを見ると</h2><p>A状況から、B状況を推測する表現です。</p><blockquote><p>瞼がすごく重く見えるところを見ると、さぞ昨日の夜は夜更かしをしたな。</p></blockquote><h2 id="ところまで"><a href="#ところまで" class="headerlink" title="ところまで"></a>ところまで</h2><p>動作は到達できる限界点を表す表現です。</p><blockquote><p>出来るところまで寝てください。</p></blockquote><h2 id="ていたところだ・〜ところに〜・〜ところへ〜"><a href="#ていたところだ・〜ところに〜・〜ところへ〜" class="headerlink" title="ていたところだ・〜ところに〜・〜ところへ〜"></a>ていたところだ・〜ところに〜・〜ところへ〜</h2><p>ちょうどAをする前に・をしている時に・が終わった時にBが発生した。</p><blockquote><p>寝ようといたところに、チャイムが鳴った。</p></blockquote><h1 id="N1"><a href="#N1" class="headerlink" title="N1"></a>N1</h1><h2 id="ところ・ところを"><a href="#ところ・ところを" class="headerlink" title="ところ・ところを"></a>ところ・ところを</h2><p>相手に対する謝罪・依頼・挨拶などの場合に使う。</p><blockquote><p>お忙しいところ中申し訳ございませんが、少し休暇の話ですが…</p></blockquote><h2 id="たところで"><a href="#たところで" class="headerlink" title="たところで"></a>たところで</h2><p>「１」A動作が終わった後すぐB動作が発生したことを表す。</p><blockquote><p>ベッドに着いたところですぐに寝た。</p></blockquote><p>「２」A事項が仮に成立したとしても、B事項に影響はほぼないことを表す表現です。</p><blockquote><p>今起きるところで世界は平和になるはずない。</p></blockquote><h2 id="ところで"><a href="#ところで" class="headerlink" title="ところで"></a>ところで</h2><p>話題を変える表現です。</p><blockquote><p>ところで寝ませんか？一緒に。</p></blockquote><h2 id="〜たら・ば〜ところだ"><a href="#〜たら・ば〜ところだ" class="headerlink" title="〜たら・ば〜ところだ"></a>〜たら・ば〜ところだ</h2><p>実際には起こらなかったA事項は、もし起こっていればB状況になる表現です。</p><blockquote><p>徹夜をしたら、起きないところだ。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>基础姿势</category>
      
      <category>日语</category>
      
    </categories>
    
    
    <tags>
      
      <tag>language</tag>
      
      <tag>japanese</tag>
      
      <tag>文法</tag>
      
      <tag>grammar</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hystrix</title>
    <link href="/2022/06/22/hystrix/"/>
    <url>/2022/06/22/hystrix/</url>
    
    <content type="html"><![CDATA[<p><img src="/2022/06/22/hystrix/hystrix.webp" alt="hystrix"></p><blockquote><p><a href="https://github.com/Netflix/Hystrix/wiki">官方文档</a></p></blockquote><h2 id="Hystrix的主要功能"><a href="#Hystrix的主要功能" class="headerlink" title="Hystrix的主要功能"></a>Hystrix的主要功能</h2><ol><li>线程拆分、隔离</li><li>降级、熔断</li><li>超时</li><li>缓存</li><li>监控</li></ol><p>增加服务调用方的对外吞吐，对被调用方提供保护</p><h2 id="线程拆分、隔离"><a href="#线程拆分、隔离" class="headerlink" title="线程拆分、隔离"></a>线程拆分、隔离</h2><p>任务线程和请求线程隔离，不同种类任务间也可以使用不同的线程池，相互间隔离。</p><h2 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h2><p>超时、异常、线程池饱和（请求拒绝，不一定是线程池的maximumPoolSize或者blockingQueue的size限制，因为会优先检查<code>queueSizeRejectionThreshold</code>，这玩意儿的默认值是5）都会执行降级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommandHelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HystrixCommand</span>&lt;String&gt; &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">CommandHelloWorld</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-built_in">super</span>(HystrixCommandGroupKey.Factory.asKey(<span class="hljs-string">&quot;ExampleGroup&quot;</span>));<br>    <span class="hljs-built_in">this</span>.name = name;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> String <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// 这里是正常业务</span><br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> String <span class="hljs-title function_">getFallback</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// 降级后的内容</span><br>      <span class="hljs-comment">// 1. 如果这里不是固定的内容还有“降级业务”，</span><br>      <span class="hljs-comment">// 需要在这里创建新的command，相当于再加一级。</span><br>      <span class="hljs-comment">// 2. 如果这里“降级业务”是查询缓存一类的低I/O行为</span><br>      <span class="hljs-comment">// 可以考虑使用“信号量”</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;dummy message&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="熔断和恢复逻辑（断路器开闭切换）"><a href="#熔断和恢复逻辑（断路器开闭切换）" class="headerlink" title="熔断和恢复逻辑（断路器开闭切换）"></a>熔断和恢复逻辑（断路器开闭切换）</h2><p><code>关闭</code>状态，如果一段时间总的请求数达到<code>circuitBreaker.requestVolumeThreshold</code>且失败的请求数大于<code>circuitBreaker.errorThresholdPercentage</code>这个百分比，断路器就会进入<code>打开</code>状态，打开状态下所有的请求都会直接执行降级逻辑，然后在<code>circuitBreaker.sleepWindowInMilliseconds</code>这个时间后会进入<code>半开</code>状态，半开状态下会尝试放一个请求，如果：</p><ol><li>该请求成功，则会进入<code>关闭</code>状态</li><li>该请求失败，保持<code>打开</code>状态（将当前时间设置为打开时间，再次等待<code>circuitBreaker.sleepWindowInMilliseconds</code>进入<code>半开</code>）</li></ol><h2 id="Pool配置"><a href="#Pool配置" class="headerlink" title="Pool配置"></a>Pool配置</h2><h3 id="corePoolSize"><a href="#corePoolSize" class="headerlink" title="corePoolSize"></a>corePoolSize</h3><ul><li><blockquote><p>Core thread-pool size that gets passed to ThreadPoolExecutor.setCorePoolSize(int)</p></blockquote></li><li><font color="red"><code>10 </code></font></li></ul><h3 id="maximumPoolSize"><a href="#maximumPoolSize" class="headerlink" title="maximumPoolSize"></a>maximumPoolSize</h3><ul><li><blockquote><p>Maximum thread-pool size configured for threadpool. May conflict with other config, so if you need the actual value that gets passed to ThreadPoolExecutor.setMaximumPoolSize(int), use actualMaximumSize(). Given all of the thread pool configuration, what is the actual maximumSize applied to the thread pool via ThreadPoolExecutor.setMaximumPoolSize(int) Cases: 1) allowMaximumSizeToDivergeFromCoreSize &#x3D;&#x3D; false: maximumSize is set to coreSize 2) allowMaximumSizeToDivergeFromCoreSize &#x3D;&#x3D; true, maximumSize &gt;&#x3D; coreSize: thread pool has different core&#x2F;max sizes, so return the configured max 3) allowMaximumSizeToDivergeFromCoreSize &#x3D;&#x3D; true, maximumSize &lt; coreSize: threadpool incorrectly configured, use coreSize for max size</p></blockquote></li><li>仅当allowMaximumSizeToDivergeFromCoreSize是true且maximumPoolSize大于coreSize时这里的值为实际传到线程池的maximumPoolSize，否则传到线程池的maximumPoolSize实际大小为coreSize</li><li><font color="red"><code>10 </code></font></li></ul><h3 id="keepAliveTime"><a href="#keepAliveTime" class="headerlink" title="keepAliveTime"></a>keepAliveTime</h3><ul><li><blockquote><p>Keep-alive time in minutes that gets passed to ThreadPoolExecutor.setKeepAliveTime(long, TimeUnit)</p></blockquote></li><li><font color="red"><code>1 </code></font></li></ul><h3 id="maxQueueSize"><a href="#maxQueueSize" class="headerlink" title="maxQueueSize"></a>maxQueueSize</h3><ul><li><blockquote><p>Max queue size that gets passed to BlockingQueue in HystrixConcurrencyStrategy.getBlockingQueue(int) This should only affect the instantiation of a threadpool - it is not eliglible to change a queue size on the fly. For that, use queueSizeRejectionThreshold(). -1 turns it off and makes us use SynchronousQueue</p></blockquote></li><li>控制线程池的等待队列大小，不过为了能够在运行时修改这个值，hystrix往隔离线程池提交任务的时候实际参考的是queueSizeRejectionThreshold，这个值默认-1使用SynchronousQueue</li><li><font color="red"><code>-1 </code></font></li></ul><h3 id="queueSizeRejectionThreshold"><a href="#queueSizeRejectionThreshold" class="headerlink" title="queueSizeRejectionThreshold"></a>queueSizeRejectionThreshold</h3><ul><li><blockquote><p>Queue size rejection threshold is an artificial “max” size at which rejections will occur even if maxQueueSize has not been reached. This is done because the maxQueueSize of a BlockingQueue can not be dynamically changed and we want to support dynamically changing the queue size that affects rejections. This is used by HystrixCommand when queuing a thread for execution.</p></blockquote></li><li>实际控制等待队列大小的值，不过如果这个值小于maxQueueSize，那实际生效的还是maxQueueSize</li><li><font color="red"><code>5 </code></font></li></ul><h3 id="allowMaximumSizeToDivergeFromCoreSize"><a href="#allowMaximumSizeToDivergeFromCoreSize" class="headerlink" title="allowMaximumSizeToDivergeFromCoreSize"></a>allowMaximumSizeToDivergeFromCoreSize</h3><ul><li><blockquote><p>should the maximumSize config value get read and used in configuring the threadPool. turning this on should be a conscious decision by the user, so we default it to false.</p></blockquote></li><li><font color="red"><code>false </code></font></li></ul><h3 id="threadPoolRollingNumberStatisticalWindowInMilliseconds"><a href="#threadPoolRollingNumberStatisticalWindowInMilliseconds" class="headerlink" title="threadPoolRollingNumberStatisticalWindowInMilliseconds"></a>threadPoolRollingNumberStatisticalWindowInMilliseconds</h3><ul><li><blockquote><p>Duration of statistical rolling window in milliseconds. This is passed into HystrixRollingNumber inside each HystrixThreadPoolMetrics instance.</p></blockquote></li><li>滚动窗口的时间</li><li><font color="red"><code>10000 </code></font></li></ul><h3 id="threadPoolRollingNumberStatisticalWindowBuckets"><a href="#threadPoolRollingNumberStatisticalWindowBuckets" class="headerlink" title="threadPoolRollingNumberStatisticalWindowBuckets"></a>threadPoolRollingNumberStatisticalWindowBuckets</h3><ul><li><blockquote><p>Number of buckets the rolling statistical window is broken into. This is passed into HystrixRollingNumber inside each HystrixThreadPoolMetrics instance.</p></blockquote></li><li>滚动窗口的桶的数量</li><li><font color="red"><code>10</code> &#96;&#96;&#96;</font></li></ul><h2 id="Command配置"><a href="#Command配置" class="headerlink" title="Command配置"></a>Command配置</h2><h3 id="circuitBreakerEnabled"><a href="#circuitBreakerEnabled" class="headerlink" title="circuitBreakerEnabled"></a>circuitBreakerEnabled</h3><ul><li><blockquote><p>Whether to use a HystrixCircuitBreaker or not. If false no circuit-breaker logic will be used and all requests permitted. This is similar in effect to circuitBreakerForceClosed() except that continues tracking metrics and knowing whether it should be open&#x2F;closed, this property results in not even instantiating a circuit-breaker.</p></blockquote></li><li>是否启用熔断，跟circuitBreakerForceClosed的区别就是如果这个关掉的话也不会有统计数据出现</li><li><font color="red"><code>true </code></font></li></ul><h3 id="circuitBreakerErrorThresholdPercentage"><a href="#circuitBreakerErrorThresholdPercentage" class="headerlink" title="circuitBreakerErrorThresholdPercentage"></a>circuitBreakerErrorThresholdPercentage</h3><ul><li><blockquote><p>Error percentage threshold (as whole number such as 50) at which point the circuit breaker will trip open and reject requests. It will stay tripped for the duration defined in circuitBreakerSleepWindowInMilliseconds(); The error percentage this is compared against comes from HystrixCommandMetrics.getHealthCounts().</p></blockquote></li><li>触发断路的请求数量百分比</li><li><font color="red"><code>50 </code></font></li></ul><h3 id="circuitBreakerForceClosed"><a href="#circuitBreakerForceClosed" class="headerlink" title="circuitBreakerForceClosed"></a>circuitBreakerForceClosed</h3><ul><li><blockquote><p>If true the HystrixCircuitBreaker.allowRequest() will always return true to allow requests regardless of the error percentage from HystrixCommandMetrics.getHealthCounts(). The circuitBreakerForceOpen() property takes precedence so if it set to true this property does nothing.</p></blockquote></li><li><font color="red"><code>false </code></font></li></ul><h3 id="circuitBreakerForceOpen"><a href="#circuitBreakerForceOpen" class="headerlink" title="circuitBreakerForceOpen"></a>circuitBreakerForceOpen</h3><ul><li><blockquote><p>If true the HystrixCircuitBreaker.allowRequest() will always return false, causing the circuit to be open (tripped) and reject all requests. This property takes precedence over circuitBreakerForceClosed()</p></blockquote></li><li><font color="red"><code>false </code></font></li></ul><h3 id="circuitBreakerRequestVolumeThreshold"><a href="#circuitBreakerRequestVolumeThreshold" class="headerlink" title="circuitBreakerRequestVolumeThreshold"></a>circuitBreakerRequestVolumeThreshold</h3><ul><li><blockquote><p>Minimum number of requests in the metricsRollingStatisticalWindowInMilliseconds() that must exist before the HystrixCircuitBreaker will trip. If below this number the circuit will not trip regardless of error percentage.</p></blockquote></li><li>触发断路逻辑的最小阈值，在一个统计窗口内至少有一定数量的请求发生才会走断路判断逻辑</li><li><font color="red"><code>20 </code></font></li></ul><h3 id="circuitBreakerSleepWindowInMilliseconds"><a href="#circuitBreakerSleepWindowInMilliseconds" class="headerlink" title="circuitBreakerSleepWindowInMilliseconds"></a>circuitBreakerSleepWindowInMilliseconds</h3><ul><li><blockquote><p>The time in milliseconds after a HystrixCircuitBreaker trips open that it should wait before trying requests again.</p></blockquote></li><li>“半开”的尝试间隔，熔断触发之后在这个时间之后进入“半开”状态，观察请求是否恢复正常</li><li><font color="red"><code>5000 </code></font></li></ul><h3 id="executionIsolationSemaphoreMaxConcurrentRequests"><a href="#executionIsolationSemaphoreMaxConcurrentRequests" class="headerlink" title="executionIsolationSemaphoreMaxConcurrentRequests"></a>executionIsolationSemaphoreMaxConcurrentRequests</h3><ul><li><blockquote><p>Number of concurrent requests permitted to HystrixCommand.run(). Requests beyond the concurrent limit will be rejected. Applicable only when executionIsolationStrategy() &#x3D;&#x3D; SEMAPHORE.</p></blockquote></li><li>最大的并发请求提交数，只在“信号量”模式下生效</li><li><font color="red"><code>10 </code></font></li></ul><h3 id="executionIsolationStrategy"><a href="#executionIsolationStrategy" class="headerlink" title="executionIsolationStrategy"></a>executionIsolationStrategy</h3><ul><li><blockquote><p>What isolation strategy HystrixCommand.run() will be executed with. If HystrixCommandProperties.ExecutionIsolationStrategy.THREAD then it will be executed on a separate thread and concurrent requests limited by the number of threads in the thread-pool. If HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE then it will be executed on the calling thread and concurrent requests limited by the semaphore count.</p></blockquote></li><li>隔离策略</li><li><font color="red"><code>ExecutionIsolationStrategy.THREAD </code></font></li></ul><h3 id="executionIsolationThreadInterruptOnTimeout"><a href="#executionIsolationThreadInterruptOnTimeout" class="headerlink" title="executionIsolationThreadInterruptOnTimeout"></a>executionIsolationThreadInterruptOnTimeout</h3><ul><li><blockquote><p>Whether the execution thread should attempt an interrupt (using Future.cancel) when a thread times out. Applicable only when executionIsolationStrategy() &#x3D;&#x3D; THREAD.</p></blockquote></li><li>超时的时候是否尝试打断执行线程</li><li><font color="red"><code>true </code></font></li></ul><h3 id="executionIsolationThreadInterruptOnFutureCancel"><a href="#executionIsolationThreadInterruptOnFutureCancel" class="headerlink" title="executionIsolationThreadInterruptOnFutureCancel"></a>executionIsolationThreadInterruptOnFutureCancel</h3><ul><li><blockquote><p>Whether the execution thread should be interrupted if the execution observable is unsubscribed or the future is cancelled via Future.cancel(true)). Applicable only when executionIsolationStrategy() &#x3D;&#x3D; THREAD.</p></blockquote></li><li>取消订阅或者调用future.cancel(true)时是否打断工作线程（结构化并发？）</li><li><font color="red"><code>false </code></font></li></ul><h3 id="executionIsolationThreadPoolKeyOverride"><a href="#executionIsolationThreadPoolKeyOverride" class="headerlink" title="executionIsolationThreadPoolKeyOverride"></a>executionIsolationThreadPoolKeyOverride</h3><ul><li><blockquote><p>Allow a dynamic override of the HystrixThreadPoolKey that will dynamically change which HystrixThreadPool a HystrixCommand executes on. Typically this should return NULL which will cause it to use the HystrixThreadPoolKey injected into a HystrixCommand or derived from the HystrixCommandGroupKey. When set the injected or derived values will be ignored and a new HystrixThreadPool created (if necessary) and the HystrixCommand will begin using the newly defined pool. </p></blockquote></li><li><font color="red"><code>null </code></font></li></ul><h3 id="executionTimeoutInMilliseconds"><a href="#executionTimeoutInMilliseconds" class="headerlink" title="executionTimeoutInMilliseconds"></a>executionTimeoutInMilliseconds</h3><ul><li><blockquote><p>Time in milliseconds at which point the command will timeout and halt execution. If executionIsolationThreadInterruptOnTimeout &#x3D;&#x3D; true and the command is thread-isolated, the executing thread will be interrupted. If the command is semaphore-isolated and a HystrixObservableCommand, that command will get unsubscribed. </p></blockquote></li><li><font color="red"><code>1000 </code></font></li></ul><h3 id="executionTimeoutEnabled"><a href="#executionTimeoutEnabled" class="headerlink" title="executionTimeoutEnabled"></a>executionTimeoutEnabled</h3><ul><li><blockquote><p>Whether the timeout mechanism is enabled for this command</p></blockquote></li><li><font color="red"><code>true </code></font></li></ul><h3 id="fallbackIsolationSemaphoreMaxConcurrentRequests"><a href="#fallbackIsolationSemaphoreMaxConcurrentRequests" class="headerlink" title="fallbackIsolationSemaphoreMaxConcurrentRequests"></a>fallbackIsolationSemaphoreMaxConcurrentRequests</h3><ul><li><blockquote><p>Number of concurrent requests permitted to HystrixCommand.getFallback(). Requests beyond the concurrent limit will fail-fast and not attempt retrieving a fallback.</p></blockquote></li><li>最大的并发执行fallback的请求数量，超过了就不执行fallback且抛出异常算“执行失败”</li><li><font color="red"><code>10 </code></font></li></ul><h3 id="fallbackEnabled"><a href="#fallbackEnabled" class="headerlink" title="fallbackEnabled"></a>fallbackEnabled</h3><ul><li><blockquote><p>Whether HystrixCommand.getFallback() should be attempted when failure occurs.</p></blockquote></li><li><font color="red"><code>true </code></font></li></ul><h3 id="metricsHealthSnapshotIntervalInMilliseconds"><a href="#metricsHealthSnapshotIntervalInMilliseconds" class="headerlink" title="metricsHealthSnapshotIntervalInMilliseconds"></a>metricsHealthSnapshotIntervalInMilliseconds</h3><ul><li><blockquote><p>Time in milliseconds to wait between allowing health snapshots to be taken that calculate success and error percentages and affect HystrixCircuitBreaker.isOpen() status. On high-volume circuits the continual calculation of error percentage can become CPU intensive thus this controls how often it is calculated. </p></blockquote></li><li>健康快照的执行间隔，健康快照是用来计算成功&#x2F;失败的百分比的</li><li><font color="red"><code>500 </code></font></li></ul><h3 id="metricsRollingPercentileBucketSize"><a href="#metricsRollingPercentileBucketSize" class="headerlink" title="metricsRollingPercentileBucketSize"></a>metricsRollingPercentileBucketSize</h3><ul><li><blockquote><p>Maximum number of values stored in each bucket of the rolling percentile. This is passed into HystrixRollingPercentile inside HystrixCommandMetrics.</p></blockquote></li><li><font color="red"><code>100 </code></font></li></ul><h3 id="metricsRollingPercentileEnabled"><a href="#metricsRollingPercentileEnabled" class="headerlink" title="metricsRollingPercentileEnabled"></a>metricsRollingPercentileEnabled</h3><ul><li><blockquote><p>Whether percentile metrics should be captured using HystrixRollingPercentile inside HystrixCommandMetrics.</p></blockquote></li><li><font color="red"><code>true </code></font></li></ul><h3 id="metricsRollingPercentileWindowInMilliseconds"><a href="#metricsRollingPercentileWindowInMilliseconds" class="headerlink" title="metricsRollingPercentileWindowInMilliseconds"></a>metricsRollingPercentileWindowInMilliseconds</h3><ul><li><blockquote><p>Duration of percentile rolling window in milliseconds. This is passed into HystrixRollingPercentile inside HystrixCommandMetrics.</p></blockquote></li><li><font color="red"><code>60000 </code></font></li></ul><h3 id="metricsRollingPercentileWindowBuckets"><a href="#metricsRollingPercentileWindowBuckets" class="headerlink" title="metricsRollingPercentileWindowBuckets"></a>metricsRollingPercentileWindowBuckets</h3><ul><li><blockquote><p>Number of buckets the rolling percentile window is broken into. This is passed into HystrixRollingPercentile inside HystrixCommandMetrics.</p></blockquote></li><li><font color="red"><code>6 </code></font></li></ul><h3 id="metricsRollingStatisticalWindowInMilliseconds"><a href="#metricsRollingStatisticalWindowInMilliseconds" class="headerlink" title="metricsRollingStatisticalWindowInMilliseconds"></a>metricsRollingStatisticalWindowInMilliseconds</h3><ul><li><blockquote><p>Duration of statistical rolling window in milliseconds. This is passed into HystrixRollingNumber inside HystrixCommandMetrics.</p></blockquote></li><li><font color="red"><code>10000 </code></font></li></ul><h3 id="metricsRollingStatisticalWindowBuckets"><a href="#metricsRollingStatisticalWindowBuckets" class="headerlink" title="metricsRollingStatisticalWindowBuckets"></a>metricsRollingStatisticalWindowBuckets</h3><ul><li><blockquote><p>Number of buckets the rolling statistical window is broken into. This is passed into HystrixRollingNumber inside HystrixCommandMetrics.</p></blockquote></li><li><font color="red"><code>10 </code></font></li></ul><h3 id="requestCacheEnabled"><a href="#requestCacheEnabled" class="headerlink" title="requestCacheEnabled"></a>requestCacheEnabled</h3><ul><li><blockquote><p>Whether HystrixCommand.getCacheKey() should be used with HystrixRequestCache to provide de-duplication functionality via request-scoped caching.</p></blockquote></li><li><font color="red"><code>true </code></font></li></ul><h3 id="requestLogEnabled"><a href="#requestLogEnabled" class="headerlink" title="requestLogEnabled"></a>requestLogEnabled</h3><ul><li><blockquote><p>Whether HystrixCommand execution and events should be logged to HystrixRequestLog.</p></blockquote></li><li><font color="red"><code>true </code></font></li></ul><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>*实现AbstractCommand中的<code>getCacheKey()</code></p><p>（HystrixRequestContext、略）</p><h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><p>*线程池的配置注意观察rejected数值</p><p>（hystrix-metrics-event-stream、略）</p>]]></content>
    
    
    <categories>
      
      <category>基础姿势</category>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Netflix Hystrix</tag>
      
      <tag>Spring Cloud</tag>
      
      <tag>microservice</tag>
      
      <tag>distributed services</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Blender (cycles/eevee) 着色器：原理化BSDF</title>
    <link href="/2022/06/18/blender-learning-memo0/"/>
    <url>/2022/06/18/blender-learning-memo0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>参照<a href="https://docs.blender.org/manual/zh-hans/3.1/render/shader_nodes/shader/principled.html">官方文档</a>学习🙂</p></blockquote><h2 id="着色器shader"><a href="#着色器shader" class="headerlink" title="着色器shader"></a>着色器<code>shader</code></h2><h3 id="原理化BSDFpricipled-BSDF"><a href="#原理化BSDFpricipled-BSDF" class="headerlink" title="原理化BSDFpricipled BSDF"></a>原理化BSDF<code>pricipled BSDF</code></h3><p>自带的eevee和cycles（或cycles-e之类的衍生）渲染器使用的着色器。</p><blockquote><p>如果使用octane渲染器，就要用universal material着色器，但基本的着色原理大差不差</p></blockquote><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p><img src="/2022/06/18/blender-learning-memo0/render_shader-nodes_shader_principled_node.png" alt="principled BSDF"></p><h4 id="基础色Base-Color"><a href="#基础色Base-Color" class="headerlink" title="基础色Base Color"></a>基础色<code>Base Color</code></h4><p>漫射或金属表面颜色。</p><h4 id="次表面Subsurface"><a href="#次表面Subsurface" class="headerlink" title="次表面Subsurface"></a>次表面<code>Subsurface</code></h4><p>漫反射和次表面散射之间的混合。并非漫反射和次表面散射之间的简单混合，而是会与次表面半径的数值进行相乘运算。</p><h4 id="次表面半径Subsurface-Radius"><a href="#次表面半径Subsurface-Radius" class="headerlink" title="次表面半径Subsurface Radius"></a>次表面半径<code>Subsurface Radius</code></h4><p>光散射到表面下方的平均距离。较高的半径可以使外观更柔和，因为光线会流入阴影区域并穿过物体。散射距离是针对RGB通道单独指定的，对于具有较强红光散射的皮肤材质，渲染效果较佳。X，Y和Z的数值会分别映射到R，G和B的值。</p><h4 id="次表面颜色Subsurface-Color"><a href="#次表面颜色Subsurface-Color" class="headerlink" title="次表面颜色Subsurface Color"></a>次表面颜色<code>Subsurface Color</code></h4><p>次表面基础颜色。</p><h4 id="次表面折射率Subsurface-IOR（只支持cycles）"><a href="#次表面折射率Subsurface-IOR（只支持cycles）" class="headerlink" title="次表面折射率Subsurface IOR（只支持cycles）"></a>次表面折射率<code>Subsurface IOR</code>（只支持cycles）</h4><p>次表面散射的折射率。</p><h4 id="次表面各向异性Subsurface-Anisotropy（只支持cycles）"><a href="#次表面各向异性Subsurface-Anisotropy（只支持cycles）" class="headerlink" title="次表面各向异性Subsurface Anisotropy（只支持cycles）"></a>次表面各向异性<code>Subsurface Anisotropy</code>（只支持cycles）</h4><p>控制次表面散射的方向性。</p><h4 id="金属度Metallic"><a href="#金属度Metallic" class="headerlink" title="金属度Metallic"></a>金属度<code>Metallic</code></h4><p>从无金属到全金属的混合材质模式。数值为1.0时表现为基础颜色叠加完全镜面反射着色，不含任何漫射或透明属性。数值为0.0时材质变现为底层的漫射或透明层样子，但顶部仍保留着一层反射层。</p><h4 id="镜面反射Specular"><a href="#镜面反射Specular" class="headerlink" title="镜面反射Specular"></a>镜面反射<code>Specular</code></h4><p>非传导性高光反射量。表面沿法线方向的反射率常设定在0-8％范围内。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">可以使用下面这个特殊情况下的菲涅耳公式，来计算具有已知折射率的真实材质计算高光值：<br>    specular = ((ior - 1)/(ior + 1))^2 / 0.08 <br>例如：<br>    水: 折射率 = 1.33, 高光 = 0.25<br>    玻璃: 折射率 = 1.5, 高光 = 0.5<br>    钻石: 折射率 = 2.417, 高光 = 2.15<br>由于确实存在反射率高于8％的材料，因此该处允许取值大于1。<br></code></pre></td></tr></table></figure><h4 id="高光染色Specular-Tint"><a href="#高光染色Specular-Tint" class="headerlink" title="高光染色Specular Tint"></a>高光染色<code>Specular Tint</code></h4><p>使用基础色对朝向面进行高光反射，而镜面反射保持白色。</p><p>普通电介质具有无色反射，因此该参数在技术上并不具有物理学上的正确性，但可用于模拟具有复杂表面结构的材质外观。</p><h4 id="粗糙度Roughness"><a href="#粗糙度Roughness" class="headerlink" title="粗糙度Roughness"></a>粗糙度<code>Roughness</code></h4><p>用于确定漫反射和镜面反射时，物体表面的微平面粗糙度。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">从旧版的 光泽 BSDF 着色器节点转换时，应使用原始值的平方根。<br></code></pre></td></tr></table></figure><h4 id="各向异性过滤Anisotropic（只支持cycles）"><a href="#各向异性过滤Anisotropic（只支持cycles）" class="headerlink" title="各向异性过滤Anisotropic（只支持cycles）"></a>各向异性过滤<code>Anisotropic</code>（只支持cycles）</h4><p>镜面反射的各向异性量。较高的设定值可提供沿切线方向的细长高光；设定为负值则会给出垂直于切线方向的高光。</p><h4 id="各向异性旋转Anisotropic-Rotation（只支持cycles）"><a href="#各向异性旋转Anisotropic-Rotation（只支持cycles）" class="headerlink" title="各向异性旋转Anisotropic Rotation（只支持cycles）"></a>各向异性旋转<code>Anisotropic Rotation</code>（只支持cycles）</h4><p>旋转各向异性的方向，取值为1.0时，旋转一周。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">与 各向异性 BSDF 着色器节点不同，该节点的高光延伸方向会旋转90°。可通过增加0.25的旋转值进行更正。<br></code></pre></td></tr></table></figure><p><img src="/2022/06/18/blender-learning-memo0/render_shader-nodes_shader_principled_example-2a.jpg" alt="Anisotropic &amp; Roughness 1"><br><img src="/2022/06/18/blender-learning-memo0/render_shader-nodes_shader_principled_example-2b.jpg" alt="Anisotropic &amp; Roughness 2"></p><h4 id="光泽Sheen"><a href="#光泽Sheen" class="headerlink" title="光泽Sheen"></a>光泽<code>Sheen</code></h4><p>边缘附近类似天鹅绒材质的反射数量，用于模拟布料等材质。</p><ul><li>也可以用于表现人脸或者皮肤上面的汗毛效果，在光照下微微的发光</li></ul><h4 id="光泽染色Sheen-Tint"><a href="#光泽染色Sheen-Tint" class="headerlink" title="光泽染色Sheen Tint"></a>光泽染色<code>Sheen Tint</code></h4><p>在白色和基础色之间进行混合，以获得光泽反射效果。</p><h4 id="清漆Clearcoat"><a href="#清漆Clearcoat" class="headerlink" title="清漆Clearcoat"></a>清漆<code>Clearcoat</code></h4><p>物体顶部的白色高光层。适用于汽车油漆等材质的模拟。</p><h4 id="清漆粗糙度Clearcoat-Roughness"><a href="#清漆粗糙度Clearcoat-Roughness" class="headerlink" title="清漆粗糙度Clearcoat Roughness"></a>清漆粗糙度<code>Clearcoat Roughness</code></h4><p>清漆的粗糙度。</p><h4 id="IOR"><a href="#IOR" class="headerlink" title="IOR"></a>IOR</h4><p>折射率。</p><h4 id="传递采样Transmission"><a href="#传递采样Transmission" class="headerlink" title="传递采样Transmission"></a>传递采样<code>Transmission</code></h4><p>数值设定为0时，表面完全不透明；数值设定为1时，表面为玻璃状。不同的取值代表上述两种状态的混合效果。</p><h4 id="透射粗糙度Transmission-Roughness（只支持cycles）"><a href="#透射粗糙度Transmission-Roughness（只支持cycles）" class="headerlink" title="透射粗糙度Transmission Roughness（只支持cycles）"></a>透射粗糙度<code>Transmission Roughness</code>（只支持cycles）</h4><p>与 GGX 分布一起，用于控制透射光的粗糙度。</p><h4 id="自发光-发射-Emission"><a href="#自发光-发射-Emission" class="headerlink" title="自发光(发射)Emission"></a>自发光(发射)<code>Emission</code></h4><p>来自表面的自发光，与自发光着色器类似。</p><h4 id="自发光强度Emission-Strength"><a href="#自发光强度Emission-Strength" class="headerlink" title="自发光强度Emission Strength"></a>自发光强度<code>Emission Strength</code></h4><p>发射光的强度。值 1.0 将确保图像中的对象具有与自发光颜色完全相同的颜色，即使其“无阴影”。</p><h4 id="Alpha"><a href="#Alpha" class="headerlink" title="Alpha"></a>Alpha</h4><p>控制表面的透明度，数值设定为1.0时，表面完全不透明。通常连接到 “图像纹理” 着色器节点的Alpha输出接口。</p><h4 id="法向Normal"><a href="#法向Normal" class="headerlink" title="法向Normal"></a>法向<code>Normal</code></h4><p>控制基础图层的法线方向。</p><h4 id="清漆法线Clearcoat-Normal"><a href="#清漆法线Clearcoat-Normal" class="headerlink" title="清漆法线Clearcoat Normal"></a>清漆法线<code>Clearcoat Normal</code></h4><p>控制 清漆 图层的法线方向。</p><h4 id="切向-正切-Tangent"><a href="#切向-正切-Tangent" class="headerlink" title="切向(正切)Tangent"></a>切向(正切)<code>Tangent</code></h4><p>控制 各向异性 图层的法线方向。</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h4 id="分布"><a href="#分布" class="headerlink" title="分布"></a>分布</h4><ul><li>GGX<ul><li>比 多重散射 GGX 渲染速度快，但不够精确。选择它后，可以启用 透射粗糙度 输入选项。</li></ul></li><li>多重散射 GGX<ul><li>会计算微平面之间的多次反弹和散射。这样就可以使物体不会因为过度变暗而显得突兀。</li></ul></li></ul><h4 id="次表面方法"><a href="#次表面方法" class="headerlink" title="次表面方法"></a>次表面方法</h4><p>模拟次表面散射的渲染方式。eevee不支持</p><ul><li>克里斯坦森-伯利<ul><li>基于物理的体积散射的近似值。这种方法不如随机游走准确，但是在某些情况下，这种方法会更快地解决噪声。</li></ul></li><li>随机游走（固定半径）<ul><li>为薄而弯曲的物体提供准确的结果。 Random Walk 在网格内部使用真正的体积散射，这意味着它最适合封闭网格。网格中的重叠面和孔可能会导致问题。</li></ul></li><li>随机游走<ul><li>行为类似于随机游走（固定半径），但根据颜色、次表面各向异性和次表面 IOR 调整次表面半径。因此，此方法试图保留比随机游走（固定半径）更多的表面细节和颜色。</li></ul></li></ul><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p><img src="/2022/06/18/blender-learning-memo0/render_shader-nodes_shader_principled_example-1a.jpg" alt="principled example 1"></p>]]></content>
    
    
    <categories>
      
      <category>伸展运动</category>
      
      <category>3D渲染</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blender</tag>
      
      <tag>shading</tag>
      
      <tag>render</tag>
      
      <tag>cycles</tag>
      
      <tag>eevee</tag>
      
      <tag>BSDF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL中的大小写敏感排序规则</title>
    <link href="/2022/06/17/case-sensitive-collation-in-mysql/"/>
    <url>/2022/06/17/case-sensitive-collation-in-mysql/</url>
    
    <content type="html"><![CDATA[<h2 id="utf8mb4字符集排序规则"><a href="#utf8mb4字符集排序规则" class="headerlink" title="utf8mb4字符集排序规则"></a>utf8mb4字符集排序规则</h2><p>在MySQL8.0.1之前，utf8mb4没有cs排序规则，大小写敏感的排序规则只能用<code>utf8mb4_bin</code>，然后通过类似于<code>SELECT ... ORDER BY column COLLATE utf8_croatian_ci.</code>的方法来得到更“human”的排序结果。（bin的排序方式按照类似ACSII顺序，比如大小写的字母不一定会在一起）</p><ul><li><a href="https://forums.mysql.com/read.php?103,156527,198794#msg-198794">SELECT * FROM mytable WHERE name COLLATE utf8_bin &#x3D;”azolia”</a></li><li><a href="https://forums.mysql.com/read.php?103,19380,200971#msg-200971">SELECT … ORDER BY column COLLATE utf8_croatian_ci</a></li></ul><p>MySQL8.0.1之后的版本支持utf8mb4字符集的大小写敏感排序规则（utf8mb4_0900_*_as_cs）</p><blockquote><p>0900是指unicode的版本，同utf8mb4_general_520_ci的520，都应该是指排序算法版本（一种类似谁前谁后的排序规则），没有细究<br>as表示accent sensitive（他真的我哭死，竟然支持了读音排序）</p></blockquote><ul><li><a href="https://dev.mysql.com/blog-archive/mysql-8-0-1-accent-and-case-sensitive-collations-for-utf8mb4/">MySQL 8.0.1: Accent and case sensitive collations for utf8mb4</a></li><li><a href="https://dev.mysql.com/blog-archive/new-collations-in-mysql-8-0-0/">New collations in MySQL 8.0.0</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>基础姿势</category>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>charset</tag>
      
      <tag>collation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些好用的工具</title>
    <link href="/2022/06/14/useful-utils/"/>
    <url>/2022/06/14/useful-utils/</url>
    
    <content type="html"><![CDATA[<h2 id="UriComponents"><a href="#UriComponents" class="headerlink" title="UriComponents"></a>UriComponents</h2><p><code>org.springframework.web.util.UriComponents</code></p><blockquote><p>spring带的解析uri工具</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://domain:port/path1/subpath1?param0=0&amp;param1=1&quot;</span>;<br><br>UriComponentsBuilder.fromHttpUrl(url).build();<br>UriComponentsBuilder.fromUri(URI.create(uri)).build();<br>UriComponentsBuilder.fromUriString(uri).build();<br>....<br><br>uriComponents.getHost(); <span class="hljs-comment">// e.g. domain</span><br>uriComponents.getPath(); <span class="hljs-comment">// e.g. /path1/subpath1</span><br>uriComponents.getPathSegments(); <span class="hljs-comment">// e.g. [path1, subpath1]</span><br>uriComponents.getScheme(); <span class="hljs-comment">// e.g. http</span><br>uriComponents.getQueryParams(); <span class="hljs-comment">// [param0:0, param1:1]</span><br></code></pre></td></tr></table></figure><p>2022&#x2F;07&#x2F;20记：也并不是那么好用🙃<a href="/2022/07/20/url-parsing-issue/index.html">【ISSUE】用Spring工具解析带fragment的Url时异常</a></p>]]></content>
    
    
    <categories>
      
      <category>基础姿势</category>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>URI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring rabbitMQ binding配置的“陷阱”</title>
    <link href="/2022/06/14/spring-rabbitmq-binding-trap/"/>
    <url>/2022/06/14/spring-rabbitmq-binding-trap/</url>
    
    <content type="html"><![CDATA[<h2 id="Spring-RabbitMQ-bindings"><a href="#Spring-RabbitMQ-bindings" class="headerlink" title="Spring RabbitMQ bindings"></a>Spring RabbitMQ bindings</h2><blockquote><p>exchange的<code>auto-declare</code>配置同时作用于binding，如果声明新的queue，但是绑定的exchange的auto-declare为false，则不会在既有的exchange上进行绑定</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">rabbit:queue</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queue0.id&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;queue.0.name&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">rabbit:fanout-exchange</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exchange.0.name&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">rabbit:bindings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rabbit:binding</span> <span class="hljs-attr">queue</span>=<span class="hljs-string">&quot;queue0.id&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">rabbit:bindings</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">rabbit:fanout-exchange</span>&gt;</span><br></code></pre></td></tr></table></figure><p>解析binding的入口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doParseBindings</span><span class="hljs-params">(Element element, ParserContext parserContext,</span><br><span class="hljs-params">String exchangeName, Element bindings, AbstractExchangeParser parser)</span> &#123;<br><span class="hljs-keyword">if</span> (bindings != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">for</span> (Element binding : DomUtils.getChildElementsByTagName(bindings, BINDING_ELE)) &#123;<br>               <span class="hljs-comment">// 解析rabbit:binding</span><br><span class="hljs-type">BeanDefinitionBuilder</span> <span class="hljs-variable">bindingBuilder</span> <span class="hljs-operator">=</span> parser.parseBinding(exchangeName, binding,<br>parserContext);<br>               <span class="hljs-comment">// 这里是重点，解析bindings的时候，传入的是element，也就是rabbit:fanout-exchange对应的元素</span><br>NamespaceUtils.parseDeclarationControls(element, bindingBuilder);<br><span class="hljs-type">BeanDefinition</span> <span class="hljs-variable">beanDefinition</span> <span class="hljs-operator">=</span> bindingBuilder.getBeanDefinition();<br>registerBeanDefinition(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanDefinitionHolder</span>(beanDefinition, parserContext.getReaderContext()<br>.generateBeanName(beanDefinition)), parserContext.getRegistry());<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>每个binding的自动声明<code>shouldDeclare</code>属性的设置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Parses &#x27;auto-declare&#x27; and &#x27;declared-by&#x27; attributes.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> element The element.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> builder The builder.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parseDeclarationControls</span><span class="hljs-params">(Element element, BeanDefinitionBuilder builder)</span> &#123;<br>       <span class="hljs-comment">// 这里用exchange的auto-declare属性为每个binding设置shouldDeclare值</span><br>NamespaceUtils.setValueIfAttributeDefined(builder, element, <span class="hljs-string">&quot;auto-declare&quot;</span>, <span class="hljs-string">&quot;shouldDeclare&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">admins</span> <span class="hljs-operator">=</span> element.getAttribute(<span class="hljs-string">&quot;declared-by&quot;</span>);<br><span class="hljs-keyword">if</span> (StringUtils.hasText(admins)) &#123;<br>String[] adminBeanNames = admins.split(<span class="hljs-string">&quot;,&quot;</span>);<br>ManagedList&lt;BeanReference&gt; adminBeanRefs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ManagedList</span>&lt;BeanReference&gt;();<br><span class="hljs-keyword">for</span> (String adminBeanName : adminBeanNames) &#123;<br>adminBeanRefs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeBeanReference</span>(adminBeanName.trim()));<br>&#125;<br>builder.addPropertyValue(<span class="hljs-string">&quot;adminsThatShouldDeclare&quot;</span>, adminBeanRefs);<br>&#125;<br>NamespaceUtils.setValueIfAttributeDefined(builder, element, <span class="hljs-string">&quot;ignore-declaration-exceptions&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>shouldDeclare</code>在声明中的作用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Remove any instances that should not be declared by this admin.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> declarables the collection of &#123;<span class="hljs-doctag">@link</span> Declarable&#125;s.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> a new collection containing &#123;<span class="hljs-doctag">@link</span> Declarable&#125;s that should be declared by this</span><br><span class="hljs-comment"> * admin.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Declarable</span>&gt; Collection&lt;T&gt; <span class="hljs-title function_">filterDeclarables</span><span class="hljs-params">(Collection&lt;T&gt; declarables)</span> &#123;<br>Collection&lt;T&gt; filtered = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;T&gt;();<br><span class="hljs-keyword">for</span> (T declarable : declarables) &#123;<br>Collection&lt;?&gt; adminsWithWhichToDeclare = declarable.getDeclaringAdmins();<br>           <span class="hljs-comment">// 此处只保留shouldDeclare=true的bean</span><br><span class="hljs-keyword">if</span> (declarable.shouldDeclare() &amp;&amp;<br>(adminsWithWhichToDeclare.isEmpty() || adminsWithWhichToDeclare.contains(<span class="hljs-built_in">this</span>))) &#123;<br>filtered.add(declarable);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> filtered;<br>&#125;<br></code></pre></td></tr></table></figure><p>初始化的部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Declares all the exchanges, queues and bindings in the enclosing application context, if any. It should be safe</span><br><span class="hljs-comment"> * (but unnecessary) to call this method more than once.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">()</span> &#123;<br><br>...<br><br><span class="hljs-keyword">final</span> Collection&lt;Exchange&gt; exchanges = filterDeclarables(contextExchanges);<br><span class="hljs-keyword">final</span> Collection&lt;Queue&gt; queues = filterDeclarables(contextQueues);<br>       <span class="hljs-comment">// 这里过滤掉了shouldDeclare=false的binding</span><br><span class="hljs-keyword">final</span> Collection&lt;Binding&gt; bindings = filterDeclarables(contextBindings);<br><br>...<br><br><span class="hljs-built_in">this</span>.rabbitTemplate.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelCallback</span>&lt;Object&gt;() &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">doInRabbit</span><span class="hljs-params">(Channel channel)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>declareExchanges(channel, exchanges.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Exchange</span>[exchanges.size()]));<br>declareQueues(channel, queues.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>[queues.size()]));<br>               <span class="hljs-comment">// 向rabbit声明binding的部分</span><br>declareBindings(channel, bindings.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Binding</span>[bindings.size()]));<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>&#125;);<br><span class="hljs-built_in">this</span>.logger.debug(<span class="hljs-string">&quot;Declarations finished&quot;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>基础姿势</category>
      
      <category>框架和组件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RabbitMQ</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Arch Linux 安装笔记</title>
    <link href="/2022/04/19/arch-linux-setup-guide/"/>
    <url>/2022/04/19/arch-linux-setup-guide/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://wiki.archlinux.org/">https://wiki.archlinux.org/</a></p></blockquote><h2 id="基本系统安装"><a href="#基本系统安装" class="headerlink" title="基本系统安装"></a>基本系统安装</h2><h3 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h3><ul><li>检查网络<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip <span class="hljs-built_in">link</span><br></code></pre></td></tr></table></figure></li><li>更新系统时间<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">timedatectl set-ntp <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="准备磁盘"><a href="#准备磁盘" class="headerlink" title="准备磁盘"></a>准备磁盘</h3></li><li>分区<ul><li><p>查看当前磁盘信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">fdisk -l<br></code></pre></td></tr></table></figure></li><li><p>进入分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">fdisk /dev/the_disk_to_be_partitioned（要被分区的磁盘）<br></code></pre></td></tr></table></figure><p>uefi参考：</p><table><thead><tr><th>挂载点</th><th>分区</th><th>分区类型</th><th>大小</th></tr></thead><tbody><tr><td>&#x2F;mnt&#x2F;boot&#x2F;EFI</td><td>&#x2F;dev&#x2F;efi_system_partition</td><td>EFI系统分区</td><td>300M</td></tr><tr><td>[swap] <strong>移动设备建议不要</strong></td><td>&#x2F;dev&#x2F;swap_partition&#x2F;</td><td>Linux swap (交换空间)</td><td>&gt; 512M (2G if physical ram &gt; 4G)</td></tr><tr><td>&#x2F;mnt</td><td>&#x2F;dev&#x2F;root_partition</td><td>Linux x86-64 根目录 (&#x2F;)</td><td>剩余空间</td></tr></tbody></table></li><li><p><em>移动设备的情况下:</em></p><table><thead><tr><th>挂载点</th><th>分区</th><th>分区类型</th><th>大小</th></tr></thead><tbody><tr><td><em>none</em></td><td><em>none</em></td><td>BIOS启动分区</td><td>1M</td></tr><tr><td>&#x2F;mnt&#x2F;boot&#x2F;EFI</td><td>&#x2F;dev&#x2F;efi_system_partition</td><td>EFI系统分区</td><td>300M</td></tr><tr><td>&#x2F;mnt</td><td>&#x2F;dev&#x2F;root_partition</td><td>Linux x86-64 根目录 (&#x2F;)</td><td>剩余空间</td></tr></tbody></table></li><li><p>格式化分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkfs.ext4 /dev/root_partition（根分区）<br><span class="hljs-comment"># 移动设备关闭日志 mkfs.ext4 -O &quot;^has_journal&quot; /dev/root_partition（根分区）</span><br>mkswap /dev/swap_partition（交换空间分区）<br>mkfs.fat -F 32 /dev/efi_system_partition<br></code></pre></td></tr></table></figure></li><li><p>挂载分区&amp;启用交换空间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount /dev/root_partition（根分区） /mnt<br>mount /dev/efi_system_partition /mnt/boot/efi<br>swapon /dev/swap_partition（交换空间分区）<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h3><ul><li><p>设置cn源</p><p>第一种方法</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>curl <span class="hljs-string">&#x27;https://archlinux.org/mirrorlist/?country=CN&amp;prototcol=http&amp;protocol=https&amp;ip_version=4&#x27;</span> &gt; /etc/pacman.d/mirrorlist &amp;&amp; \<br><span class="hljs-built_in">echo</span> /etc/pacman.d/mirrorlist &amp;&amp; \<br>sudo vim /etc/pacman.d/mirrorlist &amp;&amp; \<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;pacman mirror list updated&#x27;</span><br></code></pre></td></tr></table></figure><p>  然后将<code>/etc/pacman.d/mirrorlist</code>中注释去掉</p><p>第二种方法</p><p>在<code>/etc/pacman.d/mirrorlist</code>中搜索CN，放到最前面，推荐aliyun的源</p></li><li><p>安装系统&amp;软件包</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacstrap /mnt base base-devel linux linux-firmware vim vi sudo git<br><span class="hljs-comment"># 移动设备 可以使用基于BFQ的io调度内核linux-zen，把linux换成linux-zen</span><br></code></pre></td></tr></table></figure></li></ul><p>  <em>参考：<a href="https://www.kernel.org/doc/html/latest/block/bfq-iosched.html">BFQ</a></em></p><h2 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h2><h3 id="系统引导"><a href="#系统引导" class="headerlink" title="系统引导"></a>系统引导</h3><ul><li>配置fstab  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab<br></code></pre></td></tr></table></figure></li><li>安装grub  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacman -S efibootmgr grub<br><br><span class="hljs-comment"># uefi</span><br>grub-install --target=x86_64-efi --efi-directory=&#123;挂载点,如/mnt/boot/EFI&#125; --bootloader-id=GRUB<br><br><span class="hljs-comment"># bios(非GPT分区无需其他空间，但GPT分区需要有一块1M的BIOS boot分区)</span><br>grub-install --target=i386-pc /dev/sdX<br></code></pre></td></tr></table></figure></li></ul><p>  <em>移动设备的情况下</em></p><p>  假设分区顺序是：<br>    - BIOS<br>    - EFI<br>    - root<br>  要先在这块设备上写入引导信息，运行<code>gdisk /dev/sdX</code></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># gdisk /dev/sdX</span><br><br>Command (? <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): r<br>Recovery/transformation <span class="hljs-built_in">command</span> (? <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): h<br><br>WARNING! Hybrid MBRs are flaky and dangerous! If you decide not to use one,<br>just hit the Enter key at the below prompt and your MBR partition table will<br>be untouched.<br><br>Type from one to three GPT partition numbers, separated by spaces, to be added to the hybrid MBR, <span class="hljs-keyword">in</span> sequence: 1 2 3<br>Place EFI GPT (0xEE) partition first <span class="hljs-keyword">in</span> MBR (good <span class="hljs-keyword">for</span> GRUB)? (Y/N): N<br><br>Creating entry <span class="hljs-keyword">for</span> GPT partition <span class="hljs-comment">#1 (MBR partition #1)</span><br>Enter an MBR hex code (default EF): <br>Set the bootable flag? (Y/N): N<br><br>Creating entry <span class="hljs-keyword">for</span> GPT partition <span class="hljs-comment">#2 (MBR partition #2)</span><br>Enter an MBR hex code (default EF): <br>Set the bootable flag? (Y/N): N<br><br>Creating entry <span class="hljs-keyword">for</span> GPT partition <span class="hljs-comment">#3 (MBR partition #3)</span><br>Enter an MBR hex code (default 83): <br>Set the bootable flag? (Y/N): Y<br><br>Recovery/transformation <span class="hljs-built_in">command</span> (? <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): x<br>Expert <span class="hljs-built_in">command</span> (? <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): h<br>Expert <span class="hljs-built_in">command</span> (? <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): w<br><br>Final checks complete. About to write GPT data. THIS WILL OVERWRITE EXISTING<br>PARTITIONS!!<br><br>Do you want to proceed? (Y/N): Y<br></code></pre></td></tr></table></figure><blockquote><p><strong>如果不需要兼容，不用做这一步，混合分区会在设备上存在两个分区表，系统识别这个设备分区的时候具体的行为完全依赖于系统的实现，非常不稳定</strong></p></blockquote><blockquote><p><strong>注意：写完hybrid之后，默认的windows中就只认MBR分区，假设分区按上面的例子，且还有一个4号分区，那么由于MBR的限制</strong><br><strong>在windows中第四个分区是无法正确识别文件系统的，如果要使用第四个分区且要通过MBR引导，那么这里就要在MBR写入134分区</strong><br><strong>ESP分区可以不用写到MBR里</strong></p></blockquote>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacman -S efibootmgr grub amd-ucode intel-ucode<br><br><span class="hljs-comment"># uefi + MBR(BIOS)混合启动</span><br>grub-install --target=x86_64-efi --efi-directory=&#123;挂载点,如/mnt/boot/EFI&#125; --removable<br> --bootloader-id=GRUB --boot-directory=&#123;root挂载点,如/mnt&#125;/boot<br><br>grub-install --target=i386-pc --recheck --boot-directory=/DATA_MOUNTPOINT/boot /dev/sdX <span class="hljs-comment">#注意这里是整个设备</span><br><br><span class="hljs-comment"># 作为保险</span><br>grub-install --target=i386-pc --recheck --boot-directory=/DATA_MOUNTPOINT/boot /dev/&#123;root的那个分区&#125;<br></code></pre></td></tr></table></figure><ul><li><p>切换到已经安装的系统</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">arch-chroot /mnt<br></code></pre></td></tr></table></figure></li><li><p>配置grub.cfg</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grub-mkconfig -o /boot/grub/grub.cfg<br></code></pre></td></tr></table></figure><h3 id="系统初始化设置"><a href="#系统初始化设置" class="headerlink" title="系统初始化设置"></a>系统初始化设置</h3></li><li><p>设置时区</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br>hwclock --systohc<br></code></pre></td></tr></table></figure></li><li><p>本地化</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">locale-gen<br></code></pre></td></tr></table></figure></li></ul><p>  – 移动设备最小化磁盘访问,把日志放到内存<br>  修改<code>/etc/systemd/journald.conf.d/usbstick.conf</code><br>  写入<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[Journal]<br>Storage=volatile<br>RuntimeMaxUse=30M<br></code></pre></td></tr></table></figure></p><ul><li>initramfs<br>  如果是移动设备，将<code>/etc/mkinitcpio.conf</code>中<code>HOOKS</code>里面的<code>block</code>和<code>keyboard</code>放到<code>autodetect</code>前面，然后  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkinitcpio -P<br></code></pre></td></tr></table></figure></li></ul><p>  创建<code>/etc/locale.conf</code>,设置<code>LANG=en_US.UTF-8</code></p><ul><li><p>hostname<br>  创建<code>/etc/hostname</code>,写入主机名</p></li><li><p>root密码</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">passwd<br></code></pre></td></tr></table></figure></li><li><p>hosts<br>  向<code>/etc/hosts</code>写入</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1 localhost<br>::1 localhost<br>127.0.0.1 &#123;hostname&#125;<br></code></pre></td></tr></table></figure></li><li><p>安装网络工具</p></li></ul><p>  *networkmanager已经不使用dhcpcd, 因此需要安装dhclient<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacman -S iw wpa_supplicant dialog dhcpcd dhclient netctl networkmanager network-manager-applet gnome-keyring<br><span class="hljs-comment"># 设置网络开机启动</span><br>systemctl <span class="hljs-built_in">enable</span> NetworkManager.service<br></code></pre></td></tr></table></figure></p><ul><li>新增用户  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">useradd -m -G <span class="hljs-built_in">users</span>,audio,lp,optical,storage,video,wheel,power -s /bin/bash 普通用户名<br>passwd 普通用户名<br></code></pre></td></tr></table></figure>  运行<code>visudo</code>, 去掉<code>%wheel ALL=(ALL) ALL</code>注释</li></ul><p><strong>到这里基本已经完成最小系统的配置和安装，在继续之前，改启动项然后reboot</strong></p><h2 id="DE-x2F-WM-x2F-DM"><a href="#DE-x2F-WM-x2F-DM" class="headerlink" title="DE&#x2F;WM&#x2F;DM"></a>DE&#x2F;WM&#x2F;DM</h2><ul><li><p>安装xorg</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S xorg xorg-xinit<br><span class="hljs-comment">## 移动设备要安装</span><br><span class="hljs-comment"># xf86-input-synaptics 支持触控板</span><br><span class="hljs-comment"># xf86-video-vesa, xf86-video-ati, xf86-video-intel, xf86-video-amdgpu, xf86-video-nouveau and xf86-video-fbdev. 大多数的开源显卡驱动</span><br><span class="hljs-comment">#  libeatmydata  可以禁用fsync，比如对于firefox：eatmydata firefox</span><br></code></pre></td></tr></table></figure></li><li><p>安装字体</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S terminus-font <br></code></pre></td></tr></table></figure></li><li><p>安装DE</p><ul><li>Mate<ul><li>安装mate<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S mate mate-extra<br></code></pre></td></tr></table></figure></li><li>配置xinitrc<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> /etc/X11/xinit/xinitrc ~/.xinitrc<br></code></pre></td></tr></table></figure>把最后的启动换成<code>exec mate-session</code></li></ul></li><li>XFCE<ul><li>安装xfce<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S xfce4 xfce4-goodies<br></code></pre></td></tr></table></figure></li><li>配置xinitrc<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> /etc/X11/xinit/xinitrc ~/.xinitrc<br></code></pre></td></tr></table></figure>把最后的启动换成<code>exec startxfce4</code></li></ul></li></ul></li><li><p>仅安装WM</p><p><em>(略)</em></p></li><li><p>安装DM</p><ul><li>lightdm<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S lightdm-gtk-greeter<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="支持hyper-v增强模式"><a href="#支持hyper-v增强模式" class="headerlink" title="支持hyper-v增强模式"></a>支持hyper-v增强模式</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://www.github.com/Microsoft/linux-vm-tools<br><span class="hljs-built_in">cd</span> linux-vm-tools/arch<br><span class="hljs-comment"># 要先开代理</span><br>./make...<br>./install...<br></code></pre></td></tr></table></figure><p>然后记得在win中用管理员设置</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">Set</span>-VM -VMName &lt;your_vm_name&gt;  -EnhancedSessionTransportType HvSocket<br></code></pre></td></tr></table></figure><p>  <strong>如果无法通过增强模式连接</strong></p><p>  <a href="https://wiki.archlinux.org/title/Xrdp#loginctl_or_systemctl_--user_not_working">arch wiki [loginctl or systemctl –user not working]</a></p><p>  Try commenting out all the references to <code>systemd-home</code> in <code>/etc/pam.d/system-auth</code>, see <a href="https://github.com/neutrinolabs/xrdp/issues/1684">github issue</a></p><h3 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> s=<span class="hljs-string">&#x27;sudo&#x27;</span><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">ls</span>=<span class="hljs-string">&#x27;ls --color=auto&#x27;</span><br><span class="hljs-built_in">alias</span> la=<span class="hljs-string">&#x27;ls -a --color=auto&#x27;</span><br><span class="hljs-built_in">alias</span> ll=<span class="hljs-string">&#x27;ls -l --color=auto&#x27;</span><br><span class="hljs-built_in">alias</span> lla=<span class="hljs-string">&#x27;ls -l -a --color=auto&#x27;</span><br><span class="hljs-built_in">alias</span> pac=<span class="hljs-string">&#x27;pacman -S&#x27;</span><br><span class="hljs-built_in">alias</span> pacyu=<span class="hljs-string">&#x27;pacman -Syu&#x27;</span><br><span class="hljs-built_in">alias</span> spac=<span class="hljs-string">&#x27;sudo pacman -S&#x27;</span><br><span class="hljs-built_in">alias</span> spacyu=<span class="hljs-string">&#x27;sudo pacman -Syu&#x27;</span><br><span class="hljs-built_in">alias</span> v=<span class="hljs-string">&#x27;vim&#x27;</span><br><span class="hljs-built_in">alias</span> sv=<span class="hljs-string">&#x27;sudo vim&#x27;</span><br><br></code></pre></td></tr></table></figure><h3 id="rsync备份"><a href="#rsync备份" class="headerlink" title="rsync备份"></a>rsync备份</h3><ul><li>安装rsync<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S rsync<br></code></pre></td></tr></table></figure></li><li>backup.sh<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;==&gt; start to backup... type device:&#x27;</span> &amp;&amp; \<br><span class="hljs-built_in">read</span> device &amp;&amp; \<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;==&gt; type mount dir:&#x27;</span> &amp;&amp; \<br><span class="hljs-built_in">read</span> mount_dir &amp;&amp; \<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;==&gt; umount $device...&#x27;</span>; \<br>umount <span class="hljs-variable">$device</span>;\<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;==&gt; umount /mnt/$mount_dir...&#x27;</span>; \<br>umount /mnt/<span class="hljs-variable">$mount_dir</span>; <br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;==&gt; remove /mnt/$mount_dir...&#x27;</span>; \<br><span class="hljs-built_in">rm</span> -rf /mnt/<span class="hljs-variable">$mount_dir</span> &amp;&amp; \<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;==&gt; create directory /mnt/$mount_dir...&#x27;</span>; \<br><span class="hljs-built_in">mkdir</span> /mnt/<span class="hljs-variable">$mount_dir</span>; \<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;==&gt; mount $device to /mnt/$mount_dir...&#x27;</span>; \<br>mount <span class="hljs-variable">$device</span> /mnt/<span class="hljs-variable">$mount_dir</span>; \<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;==&gt; create direcotry /mnt/$mount_dir/system_bakcup...&#x27;</span>; \<br><span class="hljs-built_in">mkdir</span> /mnt/<span class="hljs-variable">$mount_dir</span>/system_backup;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;==&gt; start to sync files to /mnt/$mount_dir/system_backup...&#x27;</span>; \<br>rsync --archive --one-file-system --hard-links \<br>--acls --xattrs --sparse \<br>--human-readable --numeric-ids --delete --delete-excluded \<br>--itemize-changes --verbose --progress \<br>--exclude=<span class="hljs-string">&#x27;*~&#x27;</span> \<br>--exclude=<span class="hljs-string">&#x27;$device&#x27;</span> \<br>--exclude=<span class="hljs-string">&#x27;/mnt&#x27;</span> \<br>--exclude=<span class="hljs-string">&#x27;/dev&#x27;</span> \<br>--exclude=<span class="hljs-string">&#x27;/var/tmp&#x27;</span> \<br>--exclude=<span class="hljs-string">&#x27;/tmp&#x27;</span> \<br>/ /mnt/<span class="hljs-variable">$mount_dir</span>/system_backup &amp;&amp; \<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;==&gt; finished.&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="中文及字体设置"><a href="#中文及字体设置" class="headerlink" title="中文及字体设置"></a>中文及字体设置</h3><ul><li>语言配置<br>去掉<code>/etc/locale.gen</code>中的<code>zh_CN.UTF-8 UTF-8</code>和<code>en_US.UTF-8 UTF-8</code>的注释</li></ul><p>根据需要在<code>~/.xinitrc</code>或者<code>~/.bashrc</code>配置</p><p><strong>在<code>~/.xinitrc</code>中配置要注意在<code>exec xxx</code>之前</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> LANG=zh_CN.UTF-8<br><span class="hljs-built_in">export</span> LANGUAGE=zh_CN:en_US<br></code></pre></td></tr></table></figure><ul><li>字体配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S wqy-bitmapfont wqy-microhei noto-fonts noto-fonts-emoji<br></code></pre></td></tr></table></figure>设置<code>~/.config/fontconfig/fonts.conf</code><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">fontconfig</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&#x27;fonts.dtd&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">fontconfig</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 显示器使用的像素排列方式 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">match</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;font&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;assign&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rgba&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">const</span>&gt;</span>rgb<span class="hljs-tag">&lt;/<span class="hljs-name">const</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 字体微调的程度, 可选 hintnone, hintslight (默认), hintmedium, hintfull. --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 更高的 hinting 等级可使字体更锐利，同时也会损失更多的细节 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 如果显示器的 DPI 高得不像话 (&gt;=300), 可关闭 hinting, 字体会自然对齐像素 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">match</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;font&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;assign&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hintstyle&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">const</span>&gt;</span>hintslight<span class="hljs-tag">&lt;/<span class="hljs-name">const</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 抗锯齿. 除非屏幕DPI奇高否则建议开启 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">match</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;font&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;assign&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;antialias&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">bool</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">bool</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span><br><br><br><span class="hljs-comment">&lt;!-- 全局默认字体　--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">match</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;prepend&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;family&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>Terminus<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 全局默认英文字体 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">match</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">compare</span>=<span class="hljs-string">&quot;contains&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lang&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>en<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;prepend&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;family&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>Terminus<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 全局默认中文字体 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">match</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">compare</span>=<span class="hljs-string">&quot;contains&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lang&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>zh<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;prepend&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;family&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>WenQuanYi WenQuanYi Bitmap Song<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 默认无衬线字体 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">match</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;pattern&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">qual</span>=<span class="hljs-string">&quot;any&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;family&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>sans-serif<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;family&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;prepend&quot;</span> <span class="hljs-attr">binding</span>=<span class="hljs-string">&quot;same&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>Terminus<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 默认衬线字体 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">match</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;pattern&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">qual</span>=<span class="hljs-string">&quot;any&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;family&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>serif<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;family&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;prepend&quot;</span> <span class="hljs-attr">binding</span>=<span class="hljs-string">&quot;same&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>Terminus<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 默认等宽字体 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">match</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;pattern&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">qual</span>=<span class="hljs-string">&quot;any&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;family&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>monospace<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;family&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;prepend&quot;</span> <span class="hljs-attr">binding</span>=<span class="hljs-string">&quot;same&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>Terminus<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 字体替换 --&gt;</span><br>  <span class="hljs-comment">&lt;!--SimSun, Microsoft YaHei, SimHei -&gt; WenQuanYi Micro Hei --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">match</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;pattern&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;family&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>宋体<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;family&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;assign&quot;</span> <span class="hljs-attr">binding</span>=<span class="hljs-string">&quot;strong&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>WenQuanYi WenQuanYi Bitmap Song<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>          <span class="hljs-comment">&lt;!-- &lt;string&gt;Noto Serif CJK SC&lt;/string&gt; --&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">match</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;pattern&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;family&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>SimSun<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;family&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;assign&quot;</span> <span class="hljs-attr">binding</span>=<span class="hljs-string">&quot;strong&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>WenQuanYi WenQuanYi Bitmap Song<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>          <span class="hljs-comment">&lt;!-- &lt;string&gt;Noto Serif CJK SC&lt;/string&gt; --&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">match</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;pattern&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">qual</span>=<span class="hljs-string">&quot;any&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;family&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>SimSun-18030<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;family&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;assign&quot;</span> <span class="hljs-attr">binding</span>=<span class="hljs-string">&quot;same&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>WenQuanYi WenQuanYi Bitmap Song<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>         <span class="hljs-comment">&lt;!-- &lt;string&gt;Noto Serif CJK SC&lt;/string&gt; --&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">match</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;pattern&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">qual</span>=<span class="hljs-string">&quot;any&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;family&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>Microsoft YaHei<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;family&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;assign&quot;</span> <span class="hljs-attr">binding</span>=<span class="hljs-string">&quot;same&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>WenQuanYi WenQuanYi Bitmap Song<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">match</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;pattern&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">qual</span>=<span class="hljs-string">&quot;any&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;family&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>SimHei<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;family&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;assign&quot;</span> <span class="hljs-attr">binding</span>=<span class="hljs-string">&quot;same&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>WenQuanYi WenQuanYi Bitmap Song<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">match</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;pattern&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;family&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>Times New Roman<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;family&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;append&quot;</span> <span class="hljs-attr">binding</span>=<span class="hljs-string">&quot;strong&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>WenQuanYi WenQuanYi Bitmap Song<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">match</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;pattern&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;family&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>Terminus<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;family&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;append&quot;</span> <span class="hljs-attr">binding</span>=<span class="hljs-string">&quot;strong&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>WenQuanYi WenQuanYi Bitmap Song<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span><br><br><br><span class="hljs-comment">&lt;!-- 备用字体优先顺序 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">alias</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>sans-serif<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">prefer</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Terminus<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>WenQuanYi WenQuanYi Bitmap Song<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Color Emoji<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Emoji<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans CJK SC<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans CJK TC<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans CJK JP<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans CJK KR<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">prefer</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">alias</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">alias</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>serif<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">prefer</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Terminus<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>WenQuanYi WenQuanYi Bitmap Song<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Color Emoji<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Emoji<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans CJK SC<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans CJK TC<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans CJK JP<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans CJK KR<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Emoji<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">prefer</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">alias</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">alias</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>monospace<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">prefer</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Terminus<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>WenQuanYi WenQuanYi Bitmap Song<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Color Emoji<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Emoji<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans CJK SC<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans CJK TC<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans CJK JP<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans CJK KR<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">prefer</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">alias</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">fontconfig</span>&gt;</span><br></code></pre></td></tr></table></figure>设置字体偏好:<code>/etc/fonts/conf.d/64-language-selector-prefer.conf</code><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">fontconfig</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&#x27;fonts.dtd&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">fontconfig</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">alias</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>sans-serif<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">prefer</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Terminus<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>WenQuanYi WenQuanYi Bitmap Song<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Color Emoji<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Emoji<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans CJK SC<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans CJK TC<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans CJK JP<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans CJK KR<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">prefer</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">alias</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">alias</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>serif<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">prefer</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Terminus<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>WenQuanYi WenQuanYi Bitmap Song<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Color Emoji<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Emoji<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans CJK SC<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans CJK TC<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans CJK JP<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans CJK KR<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Emoji<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">prefer</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">alias</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">alias</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>monospace<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">prefer</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Terminus<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>WenQuanYi WenQuanYi Bitmap Song<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Color Emoji<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Emoji<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans CJK SC<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans CJK TC<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans CJK JP<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Noto Sans CJK KR<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">prefer</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">alias</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">fontconfig</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure></li></ul><h3 id="安装fcitx5"><a href="#安装fcitx5" class="headerlink" title="安装fcitx5"></a>安装fcitx5</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S fcitx5-im fcitx5-chinese-addons fcitx5-mozc<br></code></pre></td></tr></table></figure><h3 id="xfce的声音"><a href="#xfce的声音" class="headerlink" title="xfce的声音"></a>xfce的声音</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S alsa-utils pulseaudio pulseaudio-alsa \<br> pavucontrol      <span class="hljs-comment">#与xfce4 panel里面的插件配合使用,必须要有这个进程</span><br></code></pre></td></tr></table></figure><p>xfce4 panel设置里面添加一个pulseaudio plugin的插件</p><p><code>alsamixer</code> F6选择声卡,然后把mm的M键去掉,上下箭头调节,auto-mute disable了以后,loopback enable. reboot重启,这时候xfce4的插件就可以调节声音了</p><h3 id="安装chrome"><a href="#安装chrome" class="headerlink" title="安装chrome"></a>安装chrome</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#AUR 助手</span><br>git <span class="hljs-built_in">clone</span> https://aur.archlinux.org/yay-git.git<br><span class="hljs-built_in">cd</span> yay-git<br>makepkg -si<br><br><span class="hljs-comment">#yay不要用root</span><br>yay -S google-chrome<br><br><span class="hljs-comment">#升级</span><br>yay -Syu<br></code></pre></td></tr></table></figure><h3 id="安装clash"><a href="#安装clash" class="headerlink" title="安装clash"></a>安装clash</h3><p>看<a href="https://blog.linioi.com/posts/clash-on-arch/">这</a><br>或者<a href="https://github.com/Fndroid/clash_for_windows_pkg/releases">class for windows</a></p><h3 id="支持ntfs"><a href="#支持ntfs" class="headerlink" title="支持ntfs"></a>支持ntfs</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S ntfs-3g<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>伸展运动</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>guide</tag>
      
      <tag>setup</tag>
      
      <tag>Arch Linux</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell脚本笔记</title>
    <link href="/2022/03/19/shell-some-memos-for-shell-script/"/>
    <url>/2022/03/19/shell-some-memos-for-shell-script/</url>
    
    <content type="html"><![CDATA[<ul><li><p>接受用户输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">read</span> var<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;input value is <span class="hljs-variable">$var</span>&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>成功后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> somefile &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;removed&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>失败后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> filenotexists || <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;nothing removed&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>重定向输出</p><ul><li><p><code>1</code>代表<code>stdout</code>, 标准输出</p></li><li><p><code>2</code>代表<code>stderr</code>, 标准错误输出</p></li><li><p><code>&amp;</code>代表”按照相同方式输出”</p></li><li><p><code>dev/null</code>是null文件，可以理解为一个“黑洞”设备，所有输入都会被丢弃</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;blabla&quot;</span> &gt; dest.file<br><br><span class="hljs-comment"># 输出所有输出到文件</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;blabla&quot;</span> 1 &gt; dest.file<br><br><span class="hljs-comment"># 只输出错误输出到文件</span><br><span class="hljs-built_in">rm</span> filenotexists 2 &gt; err.log<br><br><span class="hljs-comment"># 输出所有输出到文件</span><br><span class="hljs-built_in">rm</span> somefile 1 &gt; dest.file 2&gt;&amp;1<br><br><span class="hljs-comment"># 输出非错误输出到文件</span><br><span class="hljs-built_in">rm</span> somefile 1 &gt; dest.file 2 &gt; dev/null<br><br><span class="hljs-comment"># 创建两条管道</span><br><span class="hljs-built_in">rm</span> somefile 1 &gt; <span class="hljs-built_in">log</span> 2 &gt; <span class="hljs-built_in">log</span><br><br><span class="hljs-comment"># 2的管道继承于1</span><br><span class="hljs-built_in">rm</span> somefile 1 &gt; <span class="hljs-built_in">log</span> 2&gt;&amp;1<br></code></pre></td></tr></table></figure></li><li><p>创建固定大小的空文件</p><p>当<code>dev/zero</code>作为输入流的时候，会产生无限的0 (不是ASCII的’0’)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># input file is /dev/zero</span><br><span class="hljs-comment"># output file is file</span><br><span class="hljs-comment"># write 10 times</span><br><span class="hljs-comment"># 1024 bytes every time</span><br><span class="hljs-comment"># so it creates a 10k blank file</span><br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=file count=10 bs=1024<br></code></pre></td></tr></table></figure></li><li><p>if else</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">a=10<br>b=20<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> == <span class="hljs-variable">$b</span> ]<br><span class="hljs-keyword">then</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a is equal to b&quot;</span><br><span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$a</span> -gt <span class="hljs-variable">$b</span> ]<br><span class="hljs-keyword">then</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a greater than b&quot;</span><br><span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$a</span> -lt <span class="hljs-variable">$b</span> ]<br><span class="hljs-keyword">then</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a less than b&quot;</span><br><span class="hljs-keyword">else</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure></li><li><p>追加到文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">file1 &gt;&gt; file2<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;tails&quot;</span> &gt;&gt; file<br><span class="hljs-built_in">date</span> &gt;&gt; file<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>伸展运动</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>shell script</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>错误的动态类加载方式引发的metaspace内存泄漏</title>
    <link href="/2022/03/17/jvm-metaspace-leakage-caused-by-loading-dynamic-class/"/>
    <url>/2022/03/17/jvm-metaspace-leakage-caused-by-loading-dynamic-class/</url>
    
    <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>通过<code>ClassLoader#defineClass</code>方法重复定义指定<code>name</code>的类, HotSpot JVM最终会在metaspace中抛出OOM。</p><h2 id="ClassLoader-defineClass的行为"><a href="#ClassLoader-defineClass的行为" class="headerlink" title="ClassLoader#defineClass的行为"></a><code>ClassLoader#defineClass</code>的行为</h2><p><img src="/2022/03/17/jvm-metaspace-leakage-caused-by-loading-dynamic-class/0.png" alt="defineClass"></p><p><code>ClassLoader#defineClass</code>是JVM本地方法, 主要的执行步骤:</p><ol><li><p>解析class文件并检查class文件格式是否正确。</p><p><img src="/2022/03/17/jvm-metaspace-leakage-caused-by-loading-dynamic-class/1.png" alt="vm specification"></p></li><li><p>根据<code>name</code>检查<code>systemDictionary</code>中class对应的类数据Klass&#x2F;KlassHandler是否已经加载过。</p></li></ol><h2 id="HotSpot-VM解析class的时候实际行为"><a href="#HotSpot-VM解析class的时候实际行为" class="headerlink" title="HotSpot VM解析class的时候实际行为"></a>HotSpot VM解析class的时候实际行为</h2><p>在解析和检查class格式过程中, HotSpot VM同时也在metaspace中产生了对应class文件的结构数据 (class code, vtable, itable, etc.)。 所以即使传入的<code>name</code>完全一样, 也会在metaspace中不断产生“重复”的class数据。</p><p><img src="/2022/03/17/jvm-metaspace-leakage-caused-by-loading-dynamic-class/2.png" alt="native define class"></p><p><img src="/2022/03/17/jvm-metaspace-leakage-caused-by-loading-dynamic-class/3.png" alt="find klass in dict"></p><p><img src="/2022/03/17/jvm-metaspace-leakage-caused-by-loading-dynamic-class/4.png" alt="check if class already defined"></p><p>选择在解析的过程中保留完整的class数据（这里“完整”指的是相对与解析一部分之后丢弃一部分的做法），除了不这么做会增加代码复杂度、增加class数据解析的次数、产生更多的内存碎片之外，另一个考虑是正确且规范的动态类加载方式应该是通过<code>ClassLoader#loadClass()</code>来进行，而不是直接调用native方法，因为直接调用native方法并不会得到不一样的结果。</p><p><img src="/2022/03/17/jvm-metaspace-leakage-caused-by-loading-dynamic-class/5.png" alt="loadClass in java"></p><h2 id="metaspace中Class数据的GC时机"><a href="#metaspace中Class数据的GC时机" class="headerlink" title="metaspace中Class数据的GC时机"></a>metaspace中Class数据的GC时机</h2><p>实际上没有特定针对metaspace的GC行为，GC总是在堆中工作。但当堆中包含metaspace的class数据指针的class对象被执行回收时，class数据占用的空间也会被同时释放。</p><p><img src="/2022/03/17/jvm-metaspace-leakage-caused-by-loading-dynamic-class/6.png" alt="metaspace &#39;GC&#39;"></p>]]></content>
    
    
    <categories>
      
      <category>群英荟萃</category>
      
      <category>BUG草集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JVM</tag>
      
      <tag>JVM Memory</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Frida-il2cpp-bridge script for fate/go</title>
    <link href="/2022/03/17/fgo-frida-il2cpp-bridge/"/>
    <url>/2022/03/17/fgo-frida-il2cpp-bridge/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="パスワードが不一致。" data-whm="不具合のため、一時的に復号化されます。">  <script id="hbeData" type="hbeData" data-hmacdigest="fa15116d4b6dd728190ae2655613b0eab145e9838d37688a50e9c3e06d686580">c78128bf525680635b87b5a4a4e1152b7b0fc1cba3a05ca513cb0b06345017831f326612fd7d951665c5bb55f38255ba6c3a2230174e6570917cd12eed54eeee4a93ed454ede55cb74a851ae21ae8682cf0f9aabdf453d612897d12bf76a7d1c14fe8546454d1319506d1b50eff20e5119c2fa2f09fd5b7a1a0141734023a8023971cf473e852bec274aee0b6c6e98b49a144b2f9587d4c4b27afb9ede68816e62df364f75441feb883b0ff6010373b14fb6abd0127232f4d1fe044cb62067da6f5d8913892af72682666f6c4b8cb73b75ccae5f84fc618666d8a0db24c4555bbcf738875ef18960d3432a9938780f7d83ff0bc9ea0ea8461335f51bb15441017c7ad272aa3480645bb6e3981caea7fa3435dded0115869bdbfd2b8c7151ebc974025fa5dd68e212783051254107e19cdde47f48d2228ce345ca11228c01fd1949817f6acb827886dd323afebb2037b63eb6eb49bbbe1ad97027680678a5d13263f70143e306f6ac9393bfcdc40a5a98defd87d92a8776f38981c463e192f7cc254be22d4794f090f892b86e3e52411bcb11e80da340132279563a67c29ecfbfafb152e8fa53353d75bff265ac6dc1140831cfb1fe93ec58a33d326c724d64d101aed9aca30d06c2c33d992c1e7ed9d47d62e4e97569cf576151a1150b98def938f1bed3ef37c3a22a2f82e721cef6655c04d4082dc8c9be2755b636a7ae38c3badaa2c31db45b72d6a6d33e66a4006e17e30e6d0a9fc730fc730f19e99abf77878a1d75d62c33d997a80090936e63ce7cdd143fbdd2cd8a6dfa8329e0cde08fdeebd6bd0406e05a5524107143083b857375cba30ba13ca77858333bc142fa44d8630d711228c8e57d3a15c139e78958a6fec55c4303255e77f750ffb5ebc5a4e194edce0e161c3f8f329dfa051ca901b7b2d0457d4198a69f8a4b34958e4b8261059be7a192e924f1ffac651885bb8002b6de5b75b3d22bd7131fcdbaa93960aade7ebcda8e993c2cb268cc628eaacd3069c756ab74d3cd3471277c4ec202578b7144d8c510abae0cd5e9c119ce94fc9ae96bf74b970414a11a70ff9514eca8ea78277ae81d3fb33c8f73a29b08f675991370e47759aa1e32194d9217cc4873af74380f60225d103c6714fa7b30b753850021b578e89b49c43adb0ce714f60fc8e1ce39c121ba335e636e568485bf1d2b5ed1850a8cacb7157c718ca929864aad8ac75c44204bc3f3adbc8618e27e0e89efec4112f62140dbd5d6f8443ad26495e44962edacf7a61aa3691deab19aacc77df63cbc476f65b31d42c413399e847b2f60972a237fc81d5b07925db8df355aa4b00448e7c2efc5441f13e8adf642e0493cd7ffe97ea512b22baf93be7fa09944f00792a4640389959929c9e7fb891237240e7adbe34d038a96a7bf6910e6f1fea3b806165bb03096887e3cfa4d90aa94d27a82318b9314942e9fe9368afd244172ab2597d38c92f082d582a59f16e5e171d1b79a9ad7bfb59a1d20111cf728166624a2586ce32b81a3d07a9d5239c574f562027c4f783c060639c979d03230467945d2b3e2061904de689d1069899d4bc415c8adefe736dc1c421a76372d26180ded5c3244c43ea7c6cc7e498c872c02c3909e111314f0c51ad6bf1eca253d5a4bda9d94b573c3665efebbb64765994cce21c0978b2b9679082650cecbe918f63b3578c140bf3747e2566599ad2cef0cdc5d362bf4bbedb2c1405a990d200d4f6eef91a864f447664ea833167e2c293cc8df8d7ed236d003df50fdac77b116cc78b04c8e065eebe84fb72aabb99e9afc0e189715c2175f0998c787db8b7e33f960c62cb75585505e2bf74331c154214da21a514568b54678229b001cff8f516af6b21bf6028d13fe27dedfaf935a18eb6b138c93208b30f73d39f53575f77fdc902b03f4e110b579c755d3692469e8cb454abf5becebd3b9def06eb142aab52c99148b229cc8f984d0b9d6f06b0dc5b2aef154edf7ff154575f420e8c3d769eef49f209c1efc65dc78ea0c7d96fd124a1a9b5c263dcc6364ac563040ef350be444a6ea6daa6280604ae31215f20e4c3b351849431067e12945a62aa0086ad0a549542626978c91ce3d81dd493173f848aa3f5358bb080c079581d71161ffab50c62ce711888008817432c52840f308f89b7bc3c49d1673df36c877043fb015113e858054db6fc3b6b17f61100e94dfbeed767f620dc137116ece31c54000b289a4ec8b1de49370a7e78155b22d4e741dfad307632e3ceefa8a77d9e98e5e7ee06e4f814ee6a59a0651b1aa8500e4b7d76cb52df8530dab6e75d220c5b7ea35d36caa52d1c94662a41888c518f02b6121efa14a998a50ab42c6a68f9d14a78858ef858578af4660dddfd425827fa3bccb25c9b1cadbf2814d44b929d80ab0c59eff7847189f7a1fffd5241283fad8aac4104f986e897c4e37078995bc50d07e73e940fa6ab2490296413b3a72274bcf2589e286b803e7edae64e9cfc3e80ff9dddc670bd3d2604843ece54a8ab8327edc7da68681cae5852d71e05b31a4ee966ae8650b1706c2ef421a4125934ca7e959cb414e524c052f9a47dd91178895f4edff51a6e658986c705c7d8c38b8d52d298c2e2d58efdd1ce086b2caa787b3a22bf87f7a4ba21cd5b4f82ac8d3e9d188e3d458466d0b038ba9b03dc804f5dbc0b4565faef4822d3e5a4c373e0e59b823b8b4a9e04cac4d1614184f2cdaf736e64c8c754cc406d8ffb6ef88a45f317b680ecb105cb84a0fde666546fcc4ed180f07ff4573a37247b810e69c68ab538aa981022639199108edcc8e1545297c51d5a3e0872160418da38ab3b1659ba7acc9998fdb9ca12426307ec3ef5948d4aebba2605cc44c3203988d6794736e99d422a10952acb57d01a3171a332799d7bcd851a33b354625a57c4fa79805b6eeea75f5c03a480b9c625ffe858557412eea3a09f8b4717d654daedb54781896cadab3c8d6fead7065af518a58ed526e3e58f3db82254413c0e174d12e3d373c8ca64393600dbb4a6fea4eeee4bd8bc4f863bc6bf0db97e6daad1280a13060081bfc82da788f8348db97b4134ac989a3b85292c60d0c1a11869dde1647b1816475f43b35a898a0281be01349d296849f6ede2a21b9a750b173216afa4987c72cac9e35829b02eed3ac83c8b04c0d29ac3254ce86a2bfbaf247da6703d9ddb3f26dd63b6a38dfac22ea00c88183e8d47e6daafb196eeae94e36bbb5de6bfc249c11ba7998e3a8a455ba5e560782f38f94445e30064047af2384001d5102077c4225906651021bec76fcc534430e7663385ad293b6efb958d0b4f3d632ad025055016c4fe8364cf773558a154a7e8ab504a1de6f3334178ab97767f68476e923aca507e2bf358bc330f4ecec1ec472fb5ebb8819cab9f1ff6f8017a25f9199cc05f45b9283931bec95cc681a97363e887a5510a7053fcc7ef02630087e2cdf4cbf83af447ff0fb074acccdb82a4f1b642ae8e3a085e0bae2aa32f5309d2bf5d3672e30171c8159cf275e17e1f0a4fa05640d575787cd114bf97c40a2caf46e204fcb0ed187e91bf5383037db8204b70e64c2a20b60de9acd782cfbd9abf55d2c7b8f80d4ab46313d17a2cfaa4526a670969f2277e2f056a4b737d5610c77627d83e702410cc20805dec4cf80ab34a354390b88cb947eafcb6888f69be71ef6bb11d3e0f02b62832bdb57d6754384c57fef1504548b60bf2a471722253537887db228e6f5f8f11f4e62ea2f1cdad945e2b2ac7672a9994759281d19ca499f76047fe950871dd8294453599ec3524509795596995020e3d6105c0cce5e0d83c88cd6aa6f0c45f9f350c873ea198bf1ac4221656b6183ad7dafbc31e2ecf4ba522f4815c6dae2b05e1070220c201872137eda40f9d0f5d0922da6e7463bd3067e87332584525f685eaa93929c659e25a6a4fa04ff82b02080dd380339ad4b334f24c0912480cb1cce26cd03b2ad6b30ce136b738ff58715057599bcd65d16d0054390ea5770791bcf219d22f7eeadc9569920de233074e33a5dcd6f9b3a30f9d839551d0ec202156dad4e319a683d526f320841e070ad99ac5072c70edcc550c0cfe3db7c4ce310f5489503c384f54ded5f6834e7ce524ecfee4ef1cc4c98f8b629fe381850e9b00397dd1c164e7527cd26d4ccc0859d977b6dbb5f49f88ebde94182a624425caab463c691776290f30e45596d098effd36255df1d11e3c3a3683594f8515aa424d437edde447fa29f93f531918956a3fc58cc267bd37b2df25486288bb7f946a2fdea8ba97d6e657df97bb4c2817fba34a94cdf538a9769f24ab75482583073ffdef16b202b8d7bf379812b72750ed9de77228c87d03a7977e1d091248bed986314977230be0170dde0fae7c7a0b986f3a6f89e6da12f432a411177a61c5a780c5729e8dd8e9a9be0db8bf61c18a6346417e72a9c7597b9586aeb847ab43d233e4b7bffd71e02841cc9c726ab1f9c0dfa2263c93ddc30a25102441f69e82b85a8fc72d6fd925ee8f0ebf1af69bcea99c94f26ad11d6d1a064d7a694245e6be6c3586cc76d453e8208a872c450b04c289806d4ee6d8728c4ba546ef3efa80be84aa43dd0e3a9248b16dcbe0ede8fffa146f8f5b474f3b8b8119cb3998aac7758753718a5022851b2a96c54e92ff60087a3a1bde934f473e24e69a406535c0a54174e997dc76f0b86fb539327c6cb0d925ed86e8538e18bb51a5bb32aa50592d6f1c4b58df5fc5ab33572c3792a408af709e334f17597d0030898e6ed33c2bb56d90afa3298714198bf85cd173953a8b8d201a410f891d304d2d77716d3adf1c16aaf31f8e7df9c89215039b73b15aab88a257438389ea246f4ba180a07ae8b158e7847be9bc7adc227ea2b215cfd15ae9ace0d10cba13feb23c535cdcff92fc3e71140f01961e76b745ebb39a3b691d44a0780e1aa1e3e3932f6c82b6229b3fdd10e70cf7002716985a7b4a277aaaf3d50520d47c864cdc882601a538a35ac3af2fa1c426e359c9a68a94102b106096942a465b44caa6567997b81ceec6034b6e4739afd9314ccfe185cfbe333afd1acdbab3396ffca1fd3f4a353d95e9b0391c78eb8d041f334e11ed1d02f716fae7150bcc082e9b1121a97e456de8199126b51b86154f9414c3e9624b819fea18de23ac9c27965be4601dd7238ff30d84f182f45c07e214d03ff893f3d6dbefd9b332cd327450795fa754959e8ea3da5da007095193cee9df15e3fe6958ab8dd275171736d49bd65763de56600e01999b2b0a37e1ff96127a6debeec69edd0f1e486a91cacc3795cba3ddb07713d4ed5f69c62889c7d13a608dea32bdbfccb6b62eddbc89014c8f9fe0126cdbc0191c4b2b10ed6d713d8ad46003e9dabb341616fe8d8672b2987c38edbb78c73282add94eefeb0936c021880c1460c0f140c1e8566ddf2718904f02251de5b9deb5836</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">これは暗号化されている内容です。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>デスノート</category>
      
      <category>wallhack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wallhack</tag>
      
      <tag>injection</tag>
      
      <tag>reverse engineering</tag>
      
      <tag>fgo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
